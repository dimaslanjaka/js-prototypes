/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable @typescript-eslint/triple-slash-reference */
/* eslint-disable prefer-rest-params */
/* eslint-disable no-prototype-builtins */
/// <reference path="./globals.d.ts" />
const _global = (typeof window != 'undefined' ? window : global) /* node */;
Array.prototype.shuffle = function () {
    let i = this.length, j, temp;
    if (i == 0)
        return this;
    while (--i) {
        j = Math.floor(Math.random() * (i + 1));
        temp = this[i];
        this[i] = this[j];
        this[j] = temp;
    }
    return this;
};
Array.prototype.last = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[this.length - 1];
    }
    else {
        let start = this.length - n;
        if (start < 0)
            start = 0;
        return this.slice(start, this.length);
    }
};
Array.prototype.trim = function () {
    return this.map((str) => {
        if (typeof str == 'string')
            return str.trim();
    });
};
Array.prototype.isEmpty = function () {
    return this.length === 0;
};
Array.prototype.range = function (start, end) {
    if (end < start) {
        return [];
    }
    return this.slice(start, end + 1);
};
Array.prototype.add = function (element) {
    this.push(element);
    return this;
};
Array.prototype.addAll = function (...otherArrays) {
    const self = this;
    otherArrays.forEach(function (array) {
        array.forEach((item) => {
            self.push(item);
        });
    });
    return self;
};
Array.prototype.random = function () {
    return this[Math.floor(Math.random() * this.length)];
};
Array.prototype.unique = function () {
    const a = this.concat();
    for (let i = 0; i < a.length; ++i) {
        for (let j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j])
                a.splice(j--, 1);
        }
    }
    return a;
};
Array.prototype.uniqueStringArray = function () {
    const filter = new Map(this.map((s) => [s.toLowerCase(), s]));
    return [...filter.values()];
};
Array.prototype.uniqueObjectKey = function (key, removeNull = true) {
    if (!key)
        return this;
    const resArr = [];
    this.filter(function (item) {
        const i = resArr.findIndex((x) => x[key] == item[key]);
        if (i <= -1) {
            if (removeNull) {
                if (item[key])
                    resArr.push(item);
            }
            else {
                resArr.push(item);
            }
        }
        return null;
    });
    return resArr;
};
Array.prototype.contains = function (obj) {
    let i = this.length;
    while (i--) {
        if (this[i] === obj) {
            return true;
        }
    }
    return false;
};
Array.prototype.hasIndex = function (n) {
    return typeof this[n] != 'undefined';
};
Array.prototype.first = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[0];
    }
    else {
        if (this.length === 0)
            return [];
        return this.slice(0, n);
    }
};
Array.prototype.compact = function () {
    //var changes = false;
    for (let i = 0; i < this.length; i++) {
        // If element is non-existent, undefined or null, remove it.
        if (!this[i]) {
            this.splice(i, 1);
            i = i - 1;
            //changes = true;
        }
    }
    //if (!changes) return undefined;
    return this;
};
Array.prototype.deleteAt = function (index) {
    if (index < 0)
        index = this.length + index;
    // If element is non-existent, return undefined:
    if (!this.hasOwnProperty(index))
        return undefined;
    const elem = this[index];
    this.splice(index, 1);
    return elem;
};
Array.prototype.unset = function (value) {
    if (this.indexOf(value) != -1) {
        // Make sure the value exists
        this.splice(this.indexOf(value), 1);
    }
    return this;
};
Array.prototype.exists = function (n) {
    return typeof this[n] !== 'undefined';
};
if (!Array.prototype.hasOwnProperty('every')) {
    Array.prototype.every = function (fun /*, thisp */) {
        'use strict';
        const t = Object(this);
        const len = t.length >>> 0;
        let i;
        const thisp = arguments[1];
        if (this == null) {
            throw new TypeError();
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        for (i = 0; i < len; i++) {
            if (i in t && !fun.call(thisp, t[i], i, t)) {
                return false;
            }
        }
        return true;
    };
}
Array.prototype.move = function (from, to) {
    const itemRemoved = this.splice(from, 1); // splice() returns the remove element as an array
    this.splice(to, 0, itemRemoved[0]); // Insert itemRemoved into the target index
    return this;
};
Array.prototype.hapusItemDariArrayLain = function (...arrayLain) {
    let thisArr = this;
    arrayLain.forEach((otherArr) => {
        thisArr = thisArr.filter(function (el) {
            return !otherArr.includes(el);
        });
    });
    return thisArr;
};
Array.prototype.removeEmpties = function () {
    const filter = this.filter(function (el) {
        const notnull = 
        // make sure element is not null
        el != null &&
            // make sure element is not undefined
            typeof el != 'undefined';
        // if element is string, make sure string length not zero
        if (typeof el == 'string') {
            return notnull && el.trim().length > 0;
        }
        return notnull;
    });
    return filter;
};
/**
 * split array to chunks
 * @param sourceArray
 * @param chunkSize
 * @returns
 */
function array_split_chunks(sourceArray, chunkSize) {
    if (chunkSize <= 0)
        throw 'chunkSize must be greater than 0';
    const result = [];
    for (let i = 0; i < sourceArray.length; i += chunkSize) {
        result[i / chunkSize] = sourceArray.slice(i, i + chunkSize);
    }
    return result;
}
_global.array_split_chunks = array_split_chunks;
Array.prototype.split_chunks = function (size) {
    return array_split_chunks(this, size);
};
function array_filter(array) {
    return array.filter(function (el) {
        return el != null;
    });
}
_global.array_filter = array_filter;
/**
 * pick random from array
 * @param {Array<any>} arrays
 * @param {boolean} unique Unique the arrays
 */
function array_rand(arrays, unique) {
    if (unique) {
        arrays = array_unique(arrays);
    }
    const index = Math.floor(Math.random() * arrays.length);
    return {
        index: index,
        value: arrays[index],
    };
}
_global.array_rand = array_rand;
/**
 * Array unique
 * @param {Array<any>} arrays
 */
function array_unique(arrays) {
    return arrays.filter(function (item, pos, self) {
        return self.indexOf(item) == pos;
    });
}
_global.array_unique = array_unique;
/**
 * Unset array
 * @param {Array<any>} arrayName
 * @param {String|number} key
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function array_unset(arrayName, key) {
    let x;
    const tmpArray = [];
    for (x in arrayName) {
        if (x != key) {
            tmpArray[x] = arrayName[x];
        }
    }
    return tmpArray;
}
_global.array_unset = array_unset;
/**
 * PHP shuffle array equivalent
 * @param array
 * @example
 * var arr = [2, 11, 37, 42];
 * shuffle(arr);
 * console.log(arr); //return random
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function shuffle(array) {
    let currentIndex = array.length, temporaryValue, randomIndex;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
    return array;
}
_global.shuffle = shuffle;
function arrayCompare(a1, a2) {
    if (a1.length != a2.length)
        return false;
    const length = a2.length;
    for (let i = 0; i < length; i++) {
        if (a1[i] !== a2[i])
            return false;
    }
    return true;
}
_global.arrayCompare = arrayCompare;
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function inArray(needle, haystack) {
    const length = haystack.length;
    for (let i = 0; i < length; i++) {
        if (typeof haystack[i] == 'object') {
            if (arrayCompare(haystack[i], needle))
                return true;
        }
        else {
            if (haystack[i] == needle)
                return true;
        }
    }
    return false;
}
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function in_array(needle, haystack) {
    return inArray(needle, haystack);
}
_global.in_array = in_array;
/**
 * get all keys
 * @param haystack string etc
 */
function array_keys(haystack) {
    return Object.keys(haystack);
}
/**
 * Shuffles array in place.
 * @param a items An array containing the items.
 */
function array_shuffle(a) {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
_global.array_shuffle = array_shuffle;
/**
 * Deep merge two or more objects into the first.
 * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param objects  The objects to merge together
 * @returns Merged values of defaults and options
 */
function deepAssign(...objects) {
    // Make sure there are objects to merge
    const len = objects.length;
    if (len < 1)
        return;
    if (len < 2)
        return objects[0];
    // Merge all objects into first
    for (let i = 1; i < len; i++) {
        for (const key in objects[i]) {
            if (objects[i].hasOwnProperty(key)) {
                // If it's an object, recursively merge
                // Otherwise, push to key
                if (Object.prototype.toString.call(objects[i][key]) === '[object Object]') {
                    objects[0][key] = deepAssign(objects[0][key] || {}, objects[i][key]);
                }
                else {
                    objects[0][key] = objects[i][key];
                }
            }
        }
    }
    return arguments[0];
}
_global.deepAssign = deepAssign;
/**
 * Remove item from array
 * @param arr
 * @param value
 * @returns
 */
function removeItem(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
    }
    return arr;
}
_global.removeItem = removeItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELHFEQUFxRDtBQUNyRCw4REFBOEQ7QUFDOUQsdUNBQXVDO0FBQ3ZDLDBDQUEwQztBQUMxQyx1Q0FBdUM7QUFDdkMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLE1BQU0sSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBaUIsQ0FBQztBQTZMbkYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDeEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFDakIsQ0FBUyxFQUNULElBQVMsQ0FBQztJQUNaLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QixPQUFPLEVBQUUsQ0FBQyxFQUFFO1FBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztLQUNoQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRXhDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FB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QUM7aUJBQ2hGO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ25DO2FBQ0Y7U0FDRjtLQUNGO0lBRUQsT0FBTyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEIsQ0FBQztBQUNELE9BQU8sQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO0FBRWhDOzs7OztHQUtHO0FBQ0gsU0FBUyxVQUFVLENBQUksR0FBYSxFQUFFLEtBQVE7SUFDNUMsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNkLEdBQUcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQ3RCO0lBQ0QsT0FBTyxHQUFHLENBQUM7QUFDYixDQUFDO0FBQ0QsT0FBTyxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzICovXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvdHJpcGxlLXNsYXNoLXJlZmVyZW5jZSAqL1xuLyogZXNsaW50LWRpc2FibGUgcHJlZmVyLXJlc3QtcGFyYW1zICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90b3R5cGUtYnVpbHRpbnMgKi9cbi8vLyA8cmVmZXJlbmNlIHBhdGg9XCIuL2dsb2JhbHMuZC50c1wiIC8+XG5jb25zdCBfZ2xvYmFsID0gKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiBnbG9iYWwpIC8qIG5vZGUgKi8gYXMgYW55O1xuXG4vKipcbiAqIEFycmF5c1xuICovXG5pbnRlcmZhY2UgQXJyYXk8VD4ge1xuICAvKipcbiAgICogVW5pcXVlIEFycmF5XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBkdXBsaWNhdGUgPSBbMSwyLDEsMiwzLDQsNSw2XTtcbiAgICogdmFyIHVuaXF1ZSA9IGR1cGxpY2F0ZS51bmlxdWUoKTsgLy8gWzEsMiwzLDQsNSw2XVxuICAgKi9cbiAgdW5pcXVlOiAoKSA9PiBBcnJheTxUPjtcblxuICAvKipcbiAgICogVW5pcXVlIHN0cmluZyBhcnJheSBjYXNlIGluc2Vuc2l0aXZlIGJ1dCBrZWVwIG9uZSBjYXNlIHNlbnNpdGl2ZSByZXN1bHRcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzQ4NzMxNDQ1LzY0MDQ0Mzl9XG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnNvbGUubG9nKFsnSmFtZXMnLCAnamFtZXMnLCAnYm9iJywgJ0phTWVTJywgJ0JvYiddLnVuaXF1ZVN0cmluZ0FycmF5KCkpOyAvLyBbXCJKYU1lU1wiLCBcIkJvYlwiXVxuICAgKi9cbiAgdW5pcXVlU3RyaW5nQXJyYXk6ICgpID0+IEFycmF5PHN0cmluZz47XG5cbiAgLyoqXG4gICAqIE1vdmUgaXRlbSB0byBhbm90aGVyIGluZGV4XG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83MDYxODc5MS82NDA0NDM5fVxuICAgKi9cbiAgbW92ZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIFVuaXF1ZSBhcnJheSBvZiBvYmplY3RzIGJ5IGtleVxuICAgKiBAc2VlIHtAbGluayBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNTE1Mzc4ODd9XG4gICAqIEBwYXJhbSBrZXkgb2JqZWN0IGtleSB0byBjaGVja1xuICAgKiBAcGFyYW0gcmVtb3ZlTnVsbCByZW1vdmUgbnVsbCBhbmQgdW5kZWZpbmVkIChkZWZhdWx0PXRydWUpXG4gICAqL1xuICB1bmlxdWVPYmplY3RLZXk6IChrZXk6IHN0cmluZywgcmVtb3ZlTnVsbD86IGJvb2xlYW4pID0+IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgYXJyYXkgaXRlbSBmcm9tIG90aGVyIGFycmF5c1xuICAgKi9cbiAgaGFwdXNJdGVtRGFyaUFycmF5TGFpbjogKC4uLmFycmF5TGFpbjogYW55W10pID0+IGFueVtdO1xuXG4gIC8qKlxuICAgKiBQaWNrIDEgcmFuZG9tIGFycmF5IGVsZW1lbnRcbiAgICovXG4gIHJhbmRvbTogPFQ+KCkgPT4gVDtcblxuICBzcGxpdF9jaHVua3M6IChzaXplOiBudW1iZXIpID0+IGFueVtdO1xuXG4gIC8qKlxuICAgKiBBZGQgRWxlbWVudFxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgYSA9IFsxLDJdO1xuICAgKiBhLmFkZCgzKTtcbiAgICogY29uc29sZS5sb2coYSk7IC8vIFsxLDIsM11cbiAgICpcbiAgICogdmFyIGIgPSBbMCw5XTtcbiAgICogY29uc29sZS5sb2coYi5hZGQoMikpOyAvLyBbMCw5LDJdXG4gICAqL1xuICBhZGQoZWxlbWVudDogYW55KTogQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEFkZCBhbm90aGVyIGFycmF5XG4gICAqIEBkZXNjcmlwdGlvbiBBZGQgYW5vdGhlciBhcnJheSB0byBjdXJyZW50IGFycmF5XG4gICAqIEBwYXJhbSBhbm90aGVyQXJyYXlcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGEgPSBbMCwxXTtcbiAgICogdmFyIGIgPSBbJ2EnLCdiJ107XG4gICAqIGNvbnNvbGUubG9nKGIuYWRkQWxsKGEpKTsgLy8gWydhJywnYicsMCwxXVxuICAgKiB2YXIgYyA9IFsneicsMTBdO1xuICAgKiBjLmFkZEFsbChiKTtcbiAgICogY29uc29sZS5sb2coYyk7IC8vIFsneicsMTAsJ2EnLCdiJywwLDFdXG4gICAqIHZhciBkID0gWydsYXN0J106XG4gICAqIGQuYWRkQWxsKGEsYixjKTtcbiAgICogY29uc29sZS5sb2coZCk7IC8vIFsnbGFzdCcsJ2EnLCdiJywwLDFdXG4gICAqL1xuICBhZGRBbGwoLi4uYW5vdGhlckFycmF5OiBBcnJheTxhbnk+KTogQXJyYXk8YW55PjtcblxuICAvKipcbiAgICogR2V0IGVsZW1lbnQgaW4gcmFuZ2UgZnJvbSBhcnJheVxuICAgKiBAcGFyYW0gc3RhcnQgc3RhcnQgbnVtYmVyIGluZGV4XG4gICAqIEBwYXJhbSBlbmQgZW5kIG51bWJlciBpbmRleFxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBhcnIgPSBbMSwgMiwgMywgNCwgNV07XG4gICAqIGNvbnNvbGUubG9nKGFyci5yYW5nZSgxLCAzKSk7XG4gICAqL1xuICByYW5nZShzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IEFycmF5PGFueT47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSBpZiBzZWxmIGNvbnRhaW5zIG5vIGVsZW1lbnRzLlxuICAgKiBAc2VlIHtAbGluayBBcnJheTxUPi5sZW5ndGh9XG4gICAqL1xuICBpc0VtcHR5KCk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGZpcnN0IGVsZW1lbnQsIG9yIHRoZSBmaXJzdCBuIGVsZW1lbnRzLCBvZiB0aGUgYXJyYXkuXG4gICAqIElmIHRoZSBhcnJheSBpcyBlbXB0eSwgcmVxdWVzdGluZyBvbmUgZWxlbWVudCByZXR1cm5zIHVuZGVmaW5lZCAsXG4gICAqIGFuZCByZXF1ZXN0aW5nIG11bHRpcGxlIGVsZW1lbnRzIHJldHVybnMgYW4gZW1wdHkgYXJyYXkuXG4gICAqIEBleGFtcGxlXG4gICAqICAgdmFyIGEgPSBbIFwicVwiLCBcInJcIiwgXCJzXCIsIFwidFwiIF1cbiAgICogICBhLmZpcnN0KCkgICAvLyA9PiBcInFcIlxuICAgKiAgIGEuZmlyc3QoMikgIC8vID0+IFtcInFcIiwgXCJyXCJdXG4gICAqL1xuICBmaXJzdChuOiBudW1iZXIpOiBBcnJheTxUPjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGFzdCBlbGVtZW50KHMpIG9mIHNlbGYuXG4gICAqIElmIHRoZSBhcnJheSBpcyBlbXB0eSwgcmV0dXJucyB1bmRlZmluZWQgIGlmIG9ubHkgb25lIGVsZW1lbnQgcmVxdWVzdGVkLlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIHZhciBhID0gWyBcIndcIiwgXCJ4XCIsIFwieVwiLCBcInpcIiBdXG4gICAqICAgYS5sYXN0KCkgICAgIC8vID0+IFwielwiXG4gICAqICAgYS5sYXN0KDIpICAgIC8vID0+IFtcInlcIiwgXCJ6XCJdXG4gICAqL1xuICBsYXN0KG46IG51bWJlcik6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBVbnNldCBlbGVtZW50IHZhbHVlIGZyb20gYXJyYXlcbiAgICogQHBhcmFtIG4gdmFsdWUgZWxlbWVudFxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgYXJyID0gWydhJywnYicsJ2MnXTtcbiAgICogYXJyLnVuc2V0KCdjJyk7XG4gICAqIGNvbnNvbGUubG9nKGFycik7IC8vIFsnYScsJ2InXVxuICAgKi9cbiAgdW5zZXQobjogYW55KTogQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIERlbGV0ZXMgdGhlIGVsZW1lbnQgYXQgdGhlIHNwZWNpZmllZCBpbmRleCwgcmV0dXJuaW5nIHRoYXQgZWxlbWVudCwgb3IgdW5kZWZpbmVkICBpZiB0aGUgaW5kZXggaXMgb3V0IG9mIHJhbmdlLlxuICAgKiBBIG5lZ2F0aXZlIGluZGV4IGlzIGNvdW50ZWQgZnJvbSB0aGUgZW5kIG9mIHRoZSBhcnJheSwgd2hlcmUgLTEgY29ycmVzcG9uZHMgdG8gdGhlIGxhc3QgZWxlbWVudC4gUmV0dXJucyBzZWxmXG4gICAqIGZvciBjaGFpbmluZyBwdXJwb3Nlcy5cbiAgICogQGV4YW1wbGVcbiAgICogICB2YXIgYSA9IFtcImFudFwiLCBcImJhdFwiLCBcImNhdFwiLCBcImRvZ1wiXVxuICAgKiAgIGEuZGVsZXRlQXQoMikgICAgLy8gPT4gXCJjYXRcIlxuICAgKiAgIGEgICAgICAgICAgICAgICAgLy8gPT4gW1wiYW50XCIsIFwiYmF0XCIsIFwiZG9nXCJdXG4gICAqICAgYS5kZWxldGVBdCg5OSkgICAvLyA9PiB1bmRlZmluZWQgKGJlY2F1c2UgaW5kZXggOTkgbm90IGZvdW5kKVxuICAgKiAgIGlmKGEuZGVsZXRlQXQoMSkpIGNvbnNvbGUubG9nKCdpdGVtIHdpdGggaW5kZXggMSByZW1vdmVkJykgLy8gY29uZGl0aW9uYWxcbiAgICovXG4gIGRlbGV0ZUF0KG46IG51bWJlcik6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmVzIG51bGwgIGFuZCB1bmRlZmluZWQgIGVsZW1lbnRzIGZyb20gdGhlIGFycmF5LCB0dXJuaW5nIGl0IGludG8gYSBkZW5zZSBhcnJheS5cbiAgICogUmV0dXJucyBzZWxmIGZvciBjaGFpbmluZyBwdXJwb3Nlc1xuICAgKi9cbiAgY29tcGFjdCgpOiBBcnJheTxUPjtcblxuICAvKipcbiAgICogQ2hlY2sgZWxlbWVudCBpbmRleCBleGlzdHNcbiAgICogQGV4YW1wbGVcbiAgICogWydhJywnYiddLmV4aXN0cygxKTsgLy90cnVlXG4gICAqIFsnYScsJ2InXS5leGlzdHMoNCk7IC8vZmFsc2VcbiAgICovXG4gIGV4aXN0cyhuOiBudW1iZXIpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDaGVjayBhcnJheSBjb250YWlucyBzdHJpbmcvYW55XG4gICAqIEBwYXJhbSBvYmpcbiAgICogQGV4YW1wbGVcbiAgICogYWxlcnQoWzEsIDIsIDNdLmNvbnRhaW5zKDIpKTsgLy8gPT4gdHJ1ZVxuICAgKiBhbGVydChbMSwgMiwgM10uY29udGFpbnMoJzInKSk7IC8vID0+IGZhbHNlXG4gICAqL1xuICBjb250YWlucyhvYmo6IGFueSk6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFycmF5IG9mZnNldCAoaW5kZXgpIGV4aXN0c1xuICAgKiBAcGFyYW0gblxuICAgKiBAZXhhbXBsZVxuICAgKiBhbGVydChbe30sJ2EnLCd4J10uaGFzSW5kZXgoMikpOyAvLyA9PiB0cnVlIC0gYXJyYXkgaGFzIG9mZnNldCAyIGlzICd4J1xuICAgKiBhbGVydChbe30sJ2EnLCd4J10uaGFzSW5kZXgoMykpOyAvLyA9PiBmYWxzZVxuICAgKi9cbiAgaGFzSW5kZXgobjogbnVtYmVyKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogU2h1ZmZsZSBhcnJheXMuXG4gICAqIEBkZXNjcmlwdGlvbiBSYW5kb21pemUgYXJyYXkgZWxlbWVudHNcbiAgICogQGV4YW1wbGVcbiAgICogYWxlcnQoWzEsMiwzLDQsNV0uc2h1ZmZsZSgpKVxuICAgKi9cbiAgc2h1ZmZsZSgpOiBBcnJheTxUPjtcblxuICAvKipcbiAgICogUmVtb3ZlIG51bGwsIGVtcHR5IHN0cmluZywgb3IgdW5kZWZpbmVkIHZhbHVlc1xuICAgKi9cbiAgcmVtb3ZlRW1wdGllcygpOiBBcnJheTxUPjtcblxuICAvKipcbiAgICogdHJpbSBhcnJheSBvZiBzdHJpbmdzXG4gICAqL1xuICB0cmltKCk6IEFycmF5PHN0cmluZz47XG59XG5cbkFycmF5LnByb3RvdHlwZS5zaHVmZmxlID0gZnVuY3Rpb24gKCkge1xuICBsZXQgaSA9IHRoaXMubGVuZ3RoLFxuICAgIGo6IG51bWJlcixcbiAgICB0ZW1wOiBhbnk7XG4gIGlmIChpID09IDApIHJldHVybiB0aGlzO1xuICB3aGlsZSAoLS1pKSB7XG4gICAgaiA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChpICsgMSkpO1xuICAgIHRlbXAgPSB0aGlzW2ldO1xuICAgIHRoaXNbaV0gPSB0aGlzW2pdO1xuICAgIHRoaXNbal0gPSB0ZW1wO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuQXJyYXkucHJvdG90eXBlLmxhc3QgPSBmdW5jdGlvbiAobikge1xuICBpZiAoIW4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xuICB9IGVsc2Uge1xuICAgIGxldCBzdGFydCA9IHRoaXMubGVuZ3RoIC0gbjtcbiAgICBpZiAoc3RhcnQgPCAwKSBzdGFydCA9IDA7XG5cbiAgICByZXR1cm4gdGhpcy5zbGljZShzdGFydCwgdGhpcy5sZW5ndGgpO1xuICB9XG59O1xuXG5BcnJheS5wcm90b3R5cGUudHJpbSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubWFwKChzdHIpID0+IHtcbiAgICBpZiAodHlwZW9mIHN0ciA9PSAnc3RyaW5nJykgcmV0dXJuIHN0ci50cmltKCk7XG4gIH0pO1xufTtcblxuQXJyYXkucHJvdG90eXBlLmlzRW1wdHkgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLmxlbmd0aCA9PT0gMDtcbn07XG5cbkFycmF5LnByb3RvdHlwZS5yYW5nZSA9IGZ1bmN0aW9uIChzdGFydCwgZW5kKSB7XG4gIGlmIChlbmQgPCBzdGFydCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICByZXR1cm4gdGhpcy5zbGljZShzdGFydCwgZW5kICsgMSk7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgdGhpcy5wdXNoKGVsZW1lbnQpO1xuICByZXR1cm4gdGhpcztcbn07XG5cbkFycmF5LnByb3RvdHlwZS5hZGRBbGwgPSBmdW5jdGlvbiAoLi4ub3RoZXJBcnJheXMpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIG90aGVyQXJyYXlzLmZvckVhY2goZnVuY3Rpb24gKGFycmF5KSB7XG4gICAgYXJyYXkuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgc2VsZi5wdXNoKGl0ZW0pO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHNlbGY7XG59O1xuXG5BcnJheS5wcm90b3R5cGUucmFuZG9tID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmxlbmd0aCldO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnVuaXF1ZSA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxhbnk+KSB7XG4gIGNvbnN0IGEgPSB0aGlzLmNvbmNhdCgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyArK2kpIHtcbiAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBhLmxlbmd0aDsgKytqKSB7XG4gICAgICBpZiAoYVtpXSA9PT0gYVtqXSkgYS5zcGxpY2Uoai0tLCAxKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYTtcbn07XG5cbkFycmF5LnByb3RvdHlwZS51bmlxdWVTdHJpbmdBcnJheSA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxzdHJpbmc+KSB7XG4gIGNvbnN0IGZpbHRlciA9IG5ldyBNYXAodGhpcy5tYXAoKHMpID0+IFtzLnRvTG93ZXJDYXNlKCksIHNdKSk7XG4gIHJldHVybiBbLi4uZmlsdGVyLnZhbHVlcygpXTtcbn07XG5cbkFycmF5LnByb3RvdHlwZS51bmlxdWVPYmplY3RLZXkgPSBmdW5jdGlvbiAodGhpczogQXJyYXk8UmVjb3JkPHN0cmluZywgdW5rbm93bj4+LCBrZXksIHJlbW92ZU51bGwgPSB0cnVlKSB7XG4gIGlmICgha2V5KSByZXR1cm4gdGhpcztcbiAgY29uc3QgcmVzQXJyID0gW107XG4gIHRoaXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgY29uc3QgaSA9IHJlc0Fyci5maW5kSW5kZXgoKHgpID0+IHhba2V5XSA9PSBpdGVtW2tleV0pO1xuICAgIGlmIChpIDw9IC0xKSB7XG4gICAgICBpZiAocmVtb3ZlTnVsbCkge1xuICAgICAgICBpZiAoaXRlbVtrZXldKSByZXNBcnIucHVzaChpdGVtKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc0Fyci5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfSk7XG4gIHJldHVybiByZXNBcnI7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAob2JqKSB7XG4gIGxldCBpID0gdGhpcy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAodGhpc1tpXSA9PT0gb2JqKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuQXJyYXkucHJvdG90eXBlLmhhc0luZGV4ID0gZnVuY3Rpb24gKG46IG51bWJlcikge1xuICByZXR1cm4gdHlwZW9mIHRoaXNbbl0gIT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuZmlyc3QgPSBmdW5jdGlvbiAobikge1xuICBpZiAoIW4pIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgICByZXR1cm4gdGhpc1swXTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblxuICAgIHJldHVybiB0aGlzLnNsaWNlKDAsIG4pO1xuICB9XG59O1xuXG5BcnJheS5wcm90b3R5cGUuY29tcGFjdCA9IGZ1bmN0aW9uICgpIHtcbiAgLy92YXIgY2hhbmdlcyA9IGZhbHNlO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAvLyBJZiBlbGVtZW50IGlzIG5vbi1leGlzdGVudCwgdW5kZWZpbmVkIG9yIG51bGwsIHJlbW92ZSBpdC5cbiAgICBpZiAoIXRoaXNbaV0pIHtcbiAgICAgIHRoaXMuc3BsaWNlKGksIDEpO1xuICAgICAgaSA9IGkgLSAxO1xuICAgICAgLy9jaGFuZ2VzID0gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgLy9pZiAoIWNoYW5nZXMpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuZGVsZXRlQXQgPSBmdW5jdGlvbiA8VD4odGhpczogVFtdLCBpbmRleCk6IFQge1xuICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IHRoaXMubGVuZ3RoICsgaW5kZXg7XG5cbiAgLy8gSWYgZWxlbWVudCBpcyBub24tZXhpc3RlbnQsIHJldHVybiB1bmRlZmluZWQ6XG4gIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShpbmRleCkpIHJldHVybiB1bmRlZmluZWQ7XG5cbiAgY29uc3QgZWxlbSA9IHRoaXNbaW5kZXhdO1xuICB0aGlzLnNwbGljZShpbmRleCwgMSk7XG4gIHJldHVybiBlbGVtO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnVuc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gIGlmICh0aGlzLmluZGV4T2YodmFsdWUpICE9IC0xKSB7XG4gICAgLy8gTWFrZSBzdXJlIHRoZSB2YWx1ZSBleGlzdHNcbiAgICB0aGlzLnNwbGljZSh0aGlzLmluZGV4T2YodmFsdWUpLCAxKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbkFycmF5LnByb3RvdHlwZS5leGlzdHMgPSBmdW5jdGlvbiAobjogbnVtYmVyKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpc1tuXSAhPT0gJ3VuZGVmaW5lZCc7XG59O1xuXG5pZiAoIUFycmF5LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSgnZXZlcnknKSkge1xuICBBcnJheS5wcm90b3R5cGUuZXZlcnkgPSBmdW5jdGlvbiAoZnVuOiBhbnkgLyosIHRoaXNwICovKSB7XG4gICAgJ3VzZSBzdHJpY3QnO1xuICAgIGNvbnN0IHQ6IHsgW3g6IHN0cmluZ106IGFueTsgbGVuZ3RoOiBudW1iZXIgfSA9IE9iamVjdCh0aGlzKTtcbiAgICBjb25zdCBsZW4gPSB0Lmxlbmd0aCA+Pj4gMDtcbiAgICBsZXQgaTogc3RyaW5nIHwgbnVtYmVyO1xuICAgIGNvbnN0IHRoaXNwOiBhbnkgPSBhcmd1bWVudHNbMV07XG5cbiAgICBpZiAodGhpcyA9PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCk7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmdW4gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICB9XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGlmIChpIGluIHQgJiYgIWZ1bi5jYWxsKHRoaXNwLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG59XG5cbkFycmF5LnByb3RvdHlwZS5tb3ZlID0gZnVuY3Rpb24gKGZyb20sIHRvKSB7XG4gIGNvbnN0IGl0ZW1SZW1vdmVkID0gdGhpcy5zcGxpY2UoZnJvbSwgMSk7IC8vIHNwbGljZSgpIHJldHVybnMgdGhlIHJlbW92ZSBlbGVtZW50IGFzIGFuIGFycmF5XG4gIHRoaXMuc3BsaWNlKHRvLCAwLCBpdGVtUmVtb3ZlZFswXSk7IC8vIEluc2VydCBpdGVtUmVtb3ZlZCBpbnRvIHRoZSB0YXJnZXQgaW5kZXhcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuaGFwdXNJdGVtRGFyaUFycmF5TGFpbiA9IGZ1bmN0aW9uICh0aGlzOiBhbnlbXSwgLi4uYXJyYXlMYWluKSB7XG4gIGxldCB0aGlzQXJyID0gdGhpcztcbiAgYXJyYXlMYWluLmZvckVhY2goKG90aGVyQXJyKSA9PiB7XG4gICAgdGhpc0FyciA9IHRoaXNBcnIuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgcmV0dXJuICFvdGhlckFyci5pbmNsdWRlcyhlbCk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiB0aGlzQXJyO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnJlbW92ZUVtcHRpZXMgPSBmdW5jdGlvbiAodGhpczogYW55W10pIHtcbiAgY29uc3QgZmlsdGVyID0gdGhpcy5maWx0ZXIoZnVuY3Rpb24gKGVsOiBzdHJpbmcgfCBhbnkpIHtcbiAgICBjb25zdCBub3RudWxsID1cbiAgICAgIC8vIG1ha2Ugc3VyZSBlbGVtZW50IGlzIG5vdCBudWxsXG4gICAgICBlbCAhPSBudWxsICYmXG4gICAgICAvLyBtYWtlIHN1cmUgZWxlbWVudCBpcyBub3QgdW5kZWZpbmVkXG4gICAgICB0eXBlb2YgZWwgIT0gJ3VuZGVmaW5lZCc7XG4gICAgLy8gaWYgZWxlbWVudCBpcyBzdHJpbmcsIG1ha2Ugc3VyZSBzdHJpbmcgbGVuZ3RoIG5vdCB6ZXJvXG4gICAgaWYgKHR5cGVvZiBlbCA9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIG5vdG51bGwgJiYgZWwudHJpbSgpLmxlbmd0aCA+IDA7XG4gICAgfVxuICAgIHJldHVybiBub3RudWxsO1xuICB9KTtcbiAgcmV0dXJuIGZpbHRlcjtcbn07XG5cbi8qKlxuICogc3BsaXQgYXJyYXkgdG8gY2h1bmtzXG4gKiBAcGFyYW0gc291cmNlQXJyYXlcbiAqIEBwYXJhbSBjaHVua1NpemVcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGFycmF5X3NwbGl0X2NodW5rczxUIGV4dGVuZHMgYW55W10+KHNvdXJjZUFycmF5OiBULCBjaHVua1NpemUpIHtcbiAgaWYgKGNodW5rU2l6ZSA8PSAwKSB0aHJvdyAnY2h1bmtTaXplIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnO1xuICBjb25zdCByZXN1bHQgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzb3VyY2VBcnJheS5sZW5ndGg7IGkgKz0gY2h1bmtTaXplKSB7XG4gICAgcmVzdWx0W2kgLyBjaHVua1NpemVdID0gc291cmNlQXJyYXkuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbl9nbG9iYWwuYXJyYXlfc3BsaXRfY2h1bmtzID0gYXJyYXlfc3BsaXRfY2h1bmtzO1xuQXJyYXkucHJvdG90eXBlLnNwbGl0X2NodW5rcyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhcnJheV9zcGxpdF9jaHVua3ModGhpcywgc2l6ZSk7XG59O1xuXG5mdW5jdGlvbiBhcnJheV9maWx0ZXIoYXJyYXk6IFtdKSB7XG4gIHJldHVybiBhcnJheS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgcmV0dXJuIGVsICE9IG51bGw7XG4gIH0pO1xufVxuX2dsb2JhbC5hcnJheV9maWx0ZXIgPSBhcnJheV9maWx0ZXI7XG5cbi8qKlxuICogcGljayByYW5kb20gZnJvbSBhcnJheVxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnJheXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gdW5pcXVlIFVuaXF1ZSB0aGUgYXJyYXlzXG4gKi9cbmZ1bmN0aW9uIGFycmF5X3JhbmQoYXJyYXlzOiBhbnlbXSwgdW5pcXVlOiBhbnkpIHtcbiAgaWYgKHVuaXF1ZSkge1xuICAgIGFycmF5cyA9IGFycmF5X3VuaXF1ZShhcnJheXMpO1xuICB9XG4gIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYXJyYXlzLmxlbmd0aCk7XG4gIHJldHVybiB7XG4gICAgaW5kZXg6IGluZGV4LFxuICAgIHZhbHVlOiBhcnJheXNbaW5kZXhdLFxuICB9O1xufVxuX2dsb2JhbC5hcnJheV9yYW5kID0gYXJyYXlfcmFuZDtcblxuLyoqXG4gKiBBcnJheSB1bmlxdWVcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyYXlzXG4gKi9cbmZ1bmN0aW9uIGFycmF5X3VuaXF1ZShhcnJheXM6IGFueVtdKSB7XG4gIHJldHVybiBhcnJheXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtOiBhbnksIHBvczogYW55LCBzZWxmOiBzdHJpbmcgfCBhbnlbXSkge1xuICAgIHJldHVybiBzZWxmLmluZGV4T2YoaXRlbSkgPT0gcG9zO1xuICB9KTtcbn1cbl9nbG9iYWwuYXJyYXlfdW5pcXVlID0gYXJyYXlfdW5pcXVlO1xuXG4vKipcbiAqIFVuc2V0IGFycmF5XG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFycmF5TmFtZVxuICogQHBhcmFtIHtTdHJpbmd8bnVtYmVyfSBrZXlcbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuZnVuY3Rpb24gYXJyYXlfdW5zZXQoYXJyYXlOYW1lOiB7IFt4OiBzdHJpbmddOiBhbnkgfSwga2V5OiBhbnkpIHtcbiAgbGV0IHg6IHN0cmluZyB8IG51bWJlcjtcbiAgY29uc3QgdG1wQXJyYXkgPSBbXTtcbiAgZm9yICh4IGluIGFycmF5TmFtZSkge1xuICAgIGlmICh4ICE9IGtleSkge1xuICAgICAgdG1wQXJyYXlbeF0gPSBhcnJheU5hbWVbeF07XG4gICAgfVxuICB9XG4gIHJldHVybiB0bXBBcnJheTtcbn1cbl9nbG9iYWwuYXJyYXlfdW5zZXQgPSBhcnJheV91bnNldDtcblxuLyoqXG4gKiBQSFAgc2h1ZmZsZSBhcnJheSBlcXVpdmFsZW50XG4gKiBAcGFyYW0gYXJyYXlcbiAqIEBleGFtcGxlXG4gKiB2YXIgYXJyID0gWzIsIDExLCAzNywgNDJdO1xuICogc2h1ZmZsZShhcnIpO1xuICogY29uc29sZS5sb2coYXJyKTsgLy9yZXR1cm4gcmFuZG9tXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmZ1bmN0aW9uIHNodWZmbGUoYXJyYXk6IEFycmF5PGFueT4pIHtcbiAgbGV0IGN1cnJlbnRJbmRleCA9IGFycmF5Lmxlbmd0aCxcbiAgICB0ZW1wb3JhcnlWYWx1ZTogYW55LFxuICAgIHJhbmRvbUluZGV4OiBudW1iZXI7XG5cbiAgLy8gV2hpbGUgdGhlcmUgcmVtYWluIGVsZW1lbnRzIHRvIHNodWZmbGUuLi5cbiAgd2hpbGUgKDAgIT09IGN1cnJlbnRJbmRleCkge1xuICAgIC8vIFBpY2sgYSByZW1haW5pbmcgZWxlbWVudC4uLlxuICAgIHJhbmRvbUluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogY3VycmVudEluZGV4KTtcbiAgICBjdXJyZW50SW5kZXggLT0gMTtcblxuICAgIC8vIEFuZCBzd2FwIGl0IHdpdGggdGhlIGN1cnJlbnQgZWxlbWVudC5cbiAgICB0ZW1wb3JhcnlWYWx1ZSA9IGFycmF5W2N1cnJlbnRJbmRleF07XG4gICAgYXJyYXlbY3VycmVudEluZGV4XSA9IGFycmF5W3JhbmRvbUluZGV4XTtcbiAgICBhcnJheVtyYW5kb21JbmRleF0gPSB0ZW1wb3JhcnlWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBhcnJheTtcbn1cbl9nbG9iYWwuc2h1ZmZsZSA9IHNodWZmbGU7XG5cbmZ1bmN0aW9uIGFycmF5Q29tcGFyZShhMTogQXJyYXk8YW55PiwgYTI6IEFycmF5PGFueT4pIHtcbiAgaWYgKGExLmxlbmd0aCAhPSBhMi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgY29uc3QgbGVuZ3RoID0gYTIubGVuZ3RoO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGExW2ldICE9PSBhMltpXSkgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiB0cnVlO1xufVxuX2dsb2JhbC5hcnJheUNvbXBhcmUgPSBhcnJheUNvbXBhcmU7XG5cbi8qKlxuICogaW5fYXJyYXkgUEhQIGVxdWl2YWxlbnRcbiAqIEBwYXJhbSBuZWVkbGUgc3RyaW5nIGV0Y1xuICogQHBhcmFtIGhheXN0YWNrXG4gKi9cbmZ1bmN0aW9uIGluQXJyYXkobmVlZGxlOiBhbnksIGhheXN0YWNrOiBBcnJheTxhbnk+KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGhheXN0YWNrLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgaGF5c3RhY2tbaV0gPT0gJ29iamVjdCcpIHtcbiAgICAgIGlmIChhcnJheUNvbXBhcmUoaGF5c3RhY2tbaV0sIG5lZWRsZSkpIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoaGF5c3RhY2tbaV0gPT0gbmVlZGxlKSByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIGluX2FycmF5IFBIUCBlcXVpdmFsZW50XG4gKiBAcGFyYW0gbmVlZGxlIHN0cmluZyBldGNcbiAqIEBwYXJhbSBoYXlzdGFja1xuICovXG5mdW5jdGlvbiBpbl9hcnJheShuZWVkbGU6IGFueSwgaGF5c3RhY2s6IEFycmF5PGFueT4pIHtcbiAgcmV0dXJuIGluQXJyYXkobmVlZGxlLCBoYXlzdGFjayk7XG59XG5fZ2xvYmFsLmluX2FycmF5ID0gaW5fYXJyYXk7XG5cbi8qKlxuICogZ2V0IGFsbCBrZXlzXG4gKiBAcGFyYW0gaGF5c3RhY2sgc3RyaW5nIGV0Y1xuICovXG5mdW5jdGlvbiBhcnJheV9rZXlzKGhheXN0YWNrOiBhbnkpIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKGhheXN0YWNrKTtcbn1cblxuLyoqXG4gKiBTaHVmZmxlcyBhcnJheSBpbiBwbGFjZS5cbiAqIEBwYXJhbSBhIGl0ZW1zIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGl0ZW1zLlxuICovXG5mdW5jdGlvbiBhcnJheV9zaHVmZmxlKGE6IEFycmF5PGFueT4pIHtcbiAgbGV0IGo6IG51bWJlciwgeDogYW55LCBpOiBudW1iZXI7XG4gIGZvciAoaSA9IGEubGVuZ3RoIC0gMTsgaSA+IDA7IGktLSkge1xuICAgIGogPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaSArIDEpKTtcbiAgICB4ID0gYVtpXTtcbiAgICBhW2ldID0gYVtqXTtcbiAgICBhW2pdID0geDtcbiAgfVxuICByZXR1cm4gYTtcbn1cbl9nbG9iYWwuYXJyYXlfc2h1ZmZsZSA9IGFycmF5X3NodWZmbGU7XG5cbi8qKlxuICogRGVlcCBtZXJnZSB0d28gb3IgbW9yZSBvYmplY3RzIGludG8gdGhlIGZpcnN0LlxuICogKGMpIDIwMjEgQ2hyaXMgRmVyZGluYW5kaSwgTUlUIExpY2Vuc2UsIGh0dHBzOi8vZ29tYWtldGhpbmdzLmNvbVxuICogQHBhcmFtIG9iamVjdHMgIFRoZSBvYmplY3RzIHRvIG1lcmdlIHRvZ2V0aGVyXG4gKiBAcmV0dXJucyBNZXJnZWQgdmFsdWVzIG9mIGRlZmF1bHRzIGFuZCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGRlZXBBc3NpZ24oLi4ub2JqZWN0czogUmVjb3JkPGFueSwgdW5rbm93bj5bXSk6IFJlY29yZDxhbnksIHVua25vd24+IHtcbiAgLy8gTWFrZSBzdXJlIHRoZXJlIGFyZSBvYmplY3RzIHRvIG1lcmdlXG4gIGNvbnN0IGxlbiA9IG9iamVjdHMubGVuZ3RoO1xuICBpZiAobGVuIDwgMSkgcmV0dXJuO1xuICBpZiAobGVuIDwgMikgcmV0dXJuIG9iamVjdHNbMF07XG5cbiAgLy8gTWVyZ2UgYWxsIG9iamVjdHMgaW50byBmaXJzdFxuICBmb3IgKGxldCBpID0gMTsgaSA8IGxlbjsgaSsrKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqZWN0c1tpXSkge1xuICAgICAgaWYgKG9iamVjdHNbaV0uaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICAvLyBJZiBpdCdzIGFuIG9iamVjdCwgcmVjdXJzaXZlbHkgbWVyZ2VcbiAgICAgICAgLy8gT3RoZXJ3aXNlLCBwdXNoIHRvIGtleVxuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iamVjdHNbaV1ba2V5XSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICAgICAgb2JqZWN0c1swXVtrZXldID0gZGVlcEFzc2lnbig8YW55Pm9iamVjdHNbMF1ba2V5XSB8fCB7fSwgPGFueT5vYmplY3RzW2ldW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9iamVjdHNbMF1ba2V5XSA9IG9iamVjdHNbaV1ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhcmd1bWVudHNbMF07XG59XG5fZ2xvYmFsLmRlZXBBc3NpZ24gPSBkZWVwQXNzaWduO1xuXG4vKipcbiAqIFJlbW92ZSBpdGVtIGZyb20gYXJyYXlcbiAqIEBwYXJhbSBhcnJcbiAqIEBwYXJhbSB2YWx1ZVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlSXRlbTxUPihhcnI6IEFycmF5PFQ+LCB2YWx1ZTogVCk6IEFycmF5PFQ+IHtcbiAgY29uc3QgaW5kZXggPSBhcnIuaW5kZXhPZih2YWx1ZSk7XG4gIGlmIChpbmRleCA+IC0xKSB7XG4gICAgYXJyLnNwbGljZShpbmRleCwgMSk7XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cbl9nbG9iYWwucmVtb3ZlSXRlbSA9IHJlbW92ZUl0ZW07XG4iXX0=