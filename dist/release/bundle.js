if (typeof module.exports != 'undefined') {
    module.exports = null;
    module.exports = {
        any: null,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW55LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxJQUFJLE9BQU8sTUFBTSxDQUFDLE9BQU8sSUFBSSxXQUFXLEVBQUU7SUFDeEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFhLENBQUM7SUFDL0IsTUFBTSxDQUFDLE9BQU8sR0FBRztRQUNmLEdBQUcsRUFBRSxJQUFhO0tBQ25CLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgYW55T2YgPSBCdWZmZXIgJlxuICBzdHJpbmcgJlxuICBvYmplY3QgJlxuICBzeW1ib2wgJlxuICBudWxsICZcbiAgdW5kZWZpbmVkICZcbiAgUmVjb3JkPHN0cmluZywgYW55PiAmXG4gICgoKSA9PiBhbnkpICZcbiAgYm9vbGVhbiAmXG4gIGJvb2xlYW5bXSAmXG4gIGtleW9mIFtmYWxzZV07XG5cbmlmICh0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBudWxsIGFzIGFueU9mO1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhbnk6IG51bGwgYXMgYW55T2YsXG4gIH07XG59XG4iXX0=
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable @typescript-eslint/triple-slash-reference */
/* eslint-disable prefer-rest-params */
/* eslint-disable no-prototype-builtins */

const _global = (typeof window != 'undefined' ? window : global) /* node */;
Array.prototype.shuffle = function () {
    let i = this.length, j, temp;
    if (i == 0)
        return this;
    while (--i) {
        j = Math.floor(Math.random() * (i + 1));
        temp = this[i];
        this[i] = this[j];
        this[j] = temp;
    }
    return this;
};
Array.prototype.last = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[this.length - 1];
    }
    else {
        let start = this.length - n;
        if (start < 0)
            start = 0;
        return this.slice(start, this.length);
    }
};
Array.prototype.trim = function () {
    return this.map((str) => {
        if (typeof str == 'string')
            return str.trim();
    });
};
Array.prototype.isEmpty = function () {
    return this.length === 0;
};
Array.prototype.range = function (start, end) {
    if (end < start) {
        return [];
    }
    return this.slice(start, end + 1);
};
Array.prototype.add = function (element) {
    this.push(element);
    return this;
};
Array.prototype.addAll = function (...otherArrays) {
    const self = this;
    otherArrays.forEach(function (array) {
        array.forEach((item) => {
            self.push(item);
        });
    });
    return self;
};
Array.prototype.random = function () {
    return this[Math.floor(Math.random() * this.length)];
};
Array.prototype.unique = function () {
    const a = this.concat();
    for (let i = 0; i < a.length; ++i) {
        for (let j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j])
                a.splice(j--, 1);
        }
    }
    return a;
};
Array.prototype.uniqueStringArray = function () {
    const filter = new Map(this.map((s) => [s.toLowerCase(), s]));
    return [...filter.values()];
};
Array.prototype.uniqueObjectKey = function (key, removeNull = true) {
    if (!key)
        return this;
    const resArr = [];
    this.filter(function (item) {
        const i = resArr.findIndex((x) => x[key] == item[key]);
        if (i <= -1) {
            if (removeNull) {
                if (item[key])
                    resArr.push(item);
            }
            else {
                resArr.push(item);
            }
        }
        return null;
    });
    return resArr;
};
Array.prototype.contains = function (obj) {
    let i = this.length;
    while (i--) {
        if (this[i] === obj) {
            return true;
        }
    }
    return false;
};
Array.prototype.hasIndex = function (n) {
    return typeof this[n] != 'undefined';
};
Array.prototype.first = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[0];
    }
    else {
        if (this.length === 0)
            return [];
        return this.slice(0, n);
    }
};
Array.prototype.compact = function () {
    //var changes = false;
    for (let i = 0; i < this.length; i++) {
        // If element is non-existent, undefined or null, remove it.
        if (!this[i]) {
            this.splice(i, 1);
            i = i - 1;
            //changes = true;
        }
    }
    //if (!changes) return undefined;
    return this;
};
Array.prototype.deleteAt = function (index) {
    if (index < 0)
        index = this.length + index;
    // If element is non-existent, return undefined:
    if (!this.hasOwnProperty(index))
        return undefined;
    const elem = this[index];
    this.splice(index, 1);
    return elem;
};
Array.prototype.unset = function (value) {
    if (this.indexOf(value) != -1) {
        // Make sure the value exists
        this.splice(this.indexOf(value), 1);
    }
    return this;
};
Array.prototype.exists = function (n) {
    return typeof this[n] !== 'undefined';
};
if (!Array.prototype.hasOwnProperty('every')) {
    Array.prototype.every = function (fun /*, thisp */) {
        'use strict';
        const t = Object(this);
        const len = t.length >>> 0;
        let i;
        const thisp = arguments[1];
        if (this == null) {
            throw new TypeError();
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        for (i = 0; i < len; i++) {
            if (i in t && !fun.call(thisp, t[i], i, t)) {
                return false;
            }
        }
        return true;
    };
}
Array.prototype.move = function (from, to) {
    const itemRemoved = this.splice(from, 1); // splice() returns the remove element as an array
    this.splice(to, 0, itemRemoved[0]); // Insert itemRemoved into the target index
    return this;
};
Array.prototype.hapusItemDariArrayLain = function (...arrayLain) {
    let thisArr = this;
    arrayLain.forEach((otherArr) => {
        thisArr = thisArr.filter(function (el) {
            return !otherArr.includes(el);
        });
    });
    return thisArr;
};
Array.prototype.removeEmpties = function () {
    const filter = this.filter(function (el) {
        const notnull = 
        // make sure element is not null
        el != null &&
            // make sure element is not undefined
            typeof el != 'undefined';
        // if element is string, make sure string length not zero
        if (typeof el == 'string') {
            return notnull && el.trim().length > 0;
        }
        return notnull;
    });
    return filter;
};
function array_filter(array) {
    return array.filter(function (el) {
        return el != null;
    });
}
_global.array_filter = array_filter;
/**
 * pick random from array
 * @param {Array<any>} arrays
 * @param {boolean} unique Unique the arrays
 */
function array_rand(arrays, unique) {
    if (unique) {
        arrays = array_unique(arrays);
    }
    const index = Math.floor(Math.random() * arrays.length);
    return {
        index: index,
        value: arrays[index],
    };
}
_global.array_rand = array_rand;
/**
 * Array unique
 * @param {Array<any>} arrays
 */
function array_unique(arrays) {
    return arrays.filter(function (item, pos, self) {
        return self.indexOf(item) == pos;
    });
}
_global.array_unique = array_unique;
/**
 * Unset array
 * @param {Array<any>} arrayName
 * @param {String|number} key
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function array_unset(arrayName, key) {
    let x;
    const tmpArray = [];
    for (x in arrayName) {
        if (x != key) {
            tmpArray[x] = arrayName[x];
        }
    }
    return tmpArray;
}
_global.array_unset = array_unset;
/**
 * PHP shuffle array equivalent
 * @param array
 * @example
 * var arr = [2, 11, 37, 42];
 * shuffle(arr);
 * console.log(arr); //return random
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function shuffle(array) {
    let currentIndex = array.length, temporaryValue, randomIndex;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
    return array;
}
_global.shuffle = shuffle;
function arrayCompare(a1, a2) {
    if (a1.length != a2.length)
        return false;
    const length = a2.length;
    for (let i = 0; i < length; i++) {
        if (a1[i] !== a2[i])
            return false;
    }
    return true;
}
_global.arrayCompare = arrayCompare;
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function inArray(needle, haystack) {
    const length = haystack.length;
    for (let i = 0; i < length; i++) {
        if (typeof haystack[i] == 'object') {
            if (arrayCompare(haystack[i], needle))
                return true;
        }
        else {
            if (haystack[i] == needle)
                return true;
        }
    }
    return false;
}
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function in_array(needle, haystack) {
    return inArray(needle, haystack);
}
_global.in_array = in_array;
/**
 * get all keys
 * @param haystack string etc
 */
function array_keys(haystack) {
    return Object.keys(haystack);
}
/**
 * Shuffles array in place.
 * @param a items An array containing the items.
 */
function array_shuffle(a) {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
_global.array_shuffle = array_shuffle;
/**
 * Deep merge two or more objects into the first.
 * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param objects  The objects to merge together
 * @returns Merged values of defaults and options
 */
function deepAssign(...objects) {
    // Make sure there are objects to merge
    const len = objects.length;
    if (len < 1)
        return;
    if (len < 2)
        return objects[0];
    // Merge all objects into first
    for (let i = 1; i < len; i++) {
        for (const key in objects[i]) {
            if (objects[i].hasOwnProperty(key)) {
                // If it's an object, recursively merge
                // Otherwise, push to key
                if (Object.prototype.toString.call(objects[i][key]) === '[object Object]') {
                    objects[0][key] = deepAssign(objects[0][key] || {}, objects[i][key]);
                }
                else {
                    objects[0][key] = objects[i][key];
                }
            }
        }
    }
    return arguments[0];
}
_global.deepAssign = deepAssign;
/**
 * Remove item from array
 * @param arr
 * @param value
 * @returns
 */
function removeItem(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
    }
    return arr;
}
_global.removeItem = removeItem;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXJyYXkuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQXJyYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELHFEQUFxRDtBQUNyRCw4REFBOEQ7QUFDOUQsdUNBQXVDO0FBQ3ZDLDBDQUEwQztBQUMxQyx1Q0FBdUM7QUFDdkMsTUFBTSxPQUFPLEdBQUcsQ0FBQyxPQUFPLE1BQU0sSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsVUFBaUIsQ0FBQztBQTBMbkYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDeEIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFDakIsQ0FBUyxFQUNULElBQVMsQ0FBQztJQUNaLElBQUksQ0FBQyxJQUFJLENBQUM7UUFBRSxPQUFPLElBQUksQ0FBQztJQUN4QixPQUFPLEVBQUUsQ0FBQyxFQUFFO1FBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDeEMsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQztLQUNoQjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFDO0FBRUYsS0FBSyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDO0lBQ2hDLElBQUksQ0FBQyxDQUFDLEVBQUU7UUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUFFLE9BQU8sU0FBUyxDQUFDO1FBRXhDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FB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aXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXRoaXMtYWxpYXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC90cmlwbGUtc2xhc2gtcmVmZXJlbmNlICovXG4vKiBlc2xpbnQtZGlzYWJsZSBwcmVmZXItcmVzdC1wYXJhbXMgKi9cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvdHlwZS1idWlsdGlucyAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZ2xvYmFscy5kLnRzXCIgLz5cbmNvbnN0IF9nbG9iYWwgPSAodHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbCkgLyogbm9kZSAqLyBhcyBhbnk7XG5cbi8qKlxuICogQXJyYXlzXG4gKi9cbmludGVyZmFjZSBBcnJheTxUPiB7XG4gIC8qKlxuICAgKiBVbmlxdWUgQXJyYXlcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGR1cGxpY2F0ZSA9IFsxLDIsMSwyLDMsNCw1LDZdO1xuICAgKiB2YXIgdW5pcXVlID0gZHVwbGljYXRlLnVuaXF1ZSgpOyAvLyBbMSwyLDMsNCw1LDZdXG4gICAqL1xuICB1bmlxdWU6ICgpID0+IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBVbmlxdWUgc3RyaW5nIGFycmF5IGNhc2UgaW5zZW5zaXRpdmUgYnV0IGtlZXAgb25lIGNhc2Ugc2Vuc2l0aXZlIHJlc3VsdFxuICAgKiBAc2VlIHtAbGluayBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNDg3MzE0NDUvNjQwNDQzOX1cbiAgICogQGV4YW1wbGVcbiAgICogY29uc29sZS5sb2coWydKYW1lcycsICdqYW1lcycsICdib2InLCAnSmFNZVMnLCAnQm9iJ10udW5pcXVlU3RyaW5nQXJyYXkoKSk7IC8vIFtcIkphTWVTXCIsIFwiQm9iXCJdXG4gICAqL1xuICB1bmlxdWVTdHJpbmdBcnJheTogKCkgPT4gQXJyYXk8c3RyaW5nPjtcblxuICAvKipcbiAgICogTW92ZSBpdGVtIHRvIGFub3RoZXIgaW5kZXhcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzcwNjE4NzkxLzY0MDQ0Mzl9XG4gICAqL1xuICBtb3ZlOiAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiBBcnJheTxUPjtcblxuICAvKipcbiAgICogVW5pcXVlIGFycmF5IG9mIG9iamVjdHMgYnkga2V5XG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS81MTUzNzg4N31cbiAgICogQHBhcmFtIGtleSBvYmplY3Qga2V5IHRvIGNoZWNrXG4gICAqIEBwYXJhbSByZW1vdmVOdWxsIHJlbW92ZSBudWxsIGFuZCB1bmRlZmluZWQgKGRlZmF1bHQ9dHJ1ZSlcbiAgICovXG4gIHVuaXF1ZU9iamVjdEtleTogKGtleTogc3RyaW5nLCByZW1vdmVOdWxsPzogYm9vbGVhbikgPT4gQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhcnJheSBpdGVtIGZyb20gb3RoZXIgYXJyYXlzXG4gICAqL1xuICBoYXB1c0l0ZW1EYXJpQXJyYXlMYWluOiAoLi4uYXJyYXlMYWluOiBhbnlbXSkgPT4gYW55W107XG5cbiAgLyoqXG4gICAqIFBpY2sgMSByYW5kb20gYXJyYXkgZWxlbWVudFxuICAgKi9cbiAgcmFuZG9tOiA8VD4oKSA9PiBUO1xuXG4gIC8qKlxuICAgKiBBZGQgRWxlbWVudFxuICAgKiBAcGFyYW0gZWxlbWVudFxuICAgKiBAZXhhbXBsZVxuICAgKiB2YXIgYSA9IFsxLDJdO1xuICAgKiBhLmFkZCgzKTtcbiAgICogY29uc29sZS5sb2coYSk7IC8vIFsxLDIsM11cbiAgICpcbiAgICogdmFyIGIgPSBbMCw5XTtcbiAgICogY29uc29sZS5sb2coYi5hZGQoMikpOyAvLyBbMCw5LDJdXG4gICAqL1xuICBhZGQoZWxlbWVudDogYW55KTogQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIEBzdW1tYXJ5IEFkZCBhbm90aGVyIGFycmF5XG4gICAqIEBkZXNjcmlwdGlvbiBBZGQgYW5vdGhlciBhcnJheSB0byBjdXJyZW50IGFycmF5XG4gICAqIEBwYXJhbSBhbm90aGVyQXJyYXlcbiAgICogQGV4YW1wbGVcbiAgICogdmFyIGEgPSBbMCwxXTtcbiAgICogdmFyIGIgPSBbJ2EnLCdiJ107XG4gICAqIGNvbnNvbGUubG9nKGIuYWRkQWxsKGEpKTsgLy8gWydhJywnYicsMCwxXVxuICAgKiB2YXIgYyA9IFsneicsMTBdO1xuICAgKiBjLmFkZEFsbChiKTtcbiAgICogY29uc29sZS5sb2coYyk7IC8vIFsneicsMTAsJ2EnLCdiJywwLDFdXG4gICAqIHZhciBkID0gWydsYXN0J106XG4gICAqIGQuYWRkQWxsKGEsYixjKTtcbiAgICogY29uc29sZS5sb2coZCk7IC8vIFsnbGFzdCcsJ2EnLCdiJywwLDFdXG4gICAqL1xuICBhZGRBbGwoLi4uYW5vdGhlckFycmF5OiBBcnJheTxhbnk+KTogQXJyYXk8YW55PjtcblxuICAvKipcbiAgICogR2V0IGVsZW1lbnQgaW4gcmFuZ2UgZnJvbSBhcnJheVxuICAgKiBAcGFyYW0gc3RhcnQgc3RhcnQgbnVtYmVyIGluZGV4XG4gICAqIEBwYXJhbSBlbmQgZW5kIG51bWJlciBpbmRleFxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBhcnIgPSBbMSwgMiwgMywgNCwgNV07XG4gICAqIGNvbnNvbGUubG9nKGFyci5yYW5nZSgxLCAzKSk7XG4gICAqL1xuICByYW5nZShzdGFydDogbnVtYmVyLCBlbmQ6IG51bWJlcik6IEFycmF5PGFueT47XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdHJ1ZSAgaWYgc2VsZiBjb250YWlucyBubyBlbGVtZW50cy5cbiAgICovXG4gIGlzRW1wdHkoKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZmlyc3QgZWxlbWVudCwgb3IgdGhlIGZpcnN0IG4gZWxlbWVudHMsIG9mIHRoZSBhcnJheS5cbiAgICogSWYgdGhlIGFycmF5IGlzIGVtcHR5LCByZXF1ZXN0aW5nIG9uZSBlbGVtZW50IHJldHVybnMgdW5kZWZpbmVkICxcbiAgICogYW5kIHJlcXVlc3RpbmcgbXVsdGlwbGUgZWxlbWVudHMgcmV0dXJucyBhbiBlbXB0eSBhcnJheS5cbiAgICogQGV4YW1wbGVcbiAgICogICB2YXIgYSA9IFsgXCJxXCIsIFwiclwiLCBcInNcIiwgXCJ0XCIgXVxuICAgKiAgIGEuZmlyc3QoKSAgIC8vID0+IFwicVwiXG4gICAqICAgYS5maXJzdCgyKSAgLy8gPT4gW1wicVwiLCBcInJcIl1cbiAgICovXG4gIGZpcnN0KG46IG51bWJlcik6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBsYXN0IGVsZW1lbnQocykgb2Ygc2VsZi5cbiAgICogSWYgdGhlIGFycmF5IGlzIGVtcHR5LCByZXR1cm5zIHVuZGVmaW5lZCAgaWYgb25seSBvbmUgZWxlbWVudCByZXF1ZXN0ZWQuXG4gICAqIEBleGFtcGxlXG4gICAqICAgdmFyIGEgPSBbIFwid1wiLCBcInhcIiwgXCJ5XCIsIFwielwiIF1cbiAgICogICBhLmxhc3QoKSAgICAgLy8gPT4gXCJ6XCJcbiAgICogICBhLmxhc3QoMikgICAgLy8gPT4gW1wieVwiLCBcInpcIl1cbiAgICovXG4gIGxhc3QobjogbnVtYmVyKTogQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIFVuc2V0IGVsZW1lbnQgdmFsdWUgZnJvbSBhcnJheVxuICAgKiBAcGFyYW0gbiB2YWx1ZSBlbGVtZW50XG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBhcnIgPSBbJ2EnLCdiJywnYyddO1xuICAgKiBhcnIudW5zZXQoJ2MnKTtcbiAgICogY29uc29sZS5sb2coYXJyKTsgLy8gWydhJywnYiddXG4gICAqL1xuICB1bnNldChuOiBhbnkpOiBBcnJheTxUPjtcblxuICAvKipcbiAgICogRGVsZXRlcyB0aGUgZWxlbWVudCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LCByZXR1cm5pbmcgdGhhdCBlbGVtZW50LCBvciB1bmRlZmluZWQgIGlmIHRoZSBpbmRleCBpcyBvdXQgb2YgcmFuZ2UuXG4gICAqIEEgbmVnYXRpdmUgaW5kZXggaXMgY291bnRlZCBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5LCB3aGVyZSAtMSBjb3JyZXNwb25kcyB0byB0aGUgbGFzdCBlbGVtZW50LiBSZXR1cm5zIHNlbGZcbiAgICogZm9yIGNoYWluaW5nIHB1cnBvc2VzLlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIHZhciBhID0gW1wiYW50XCIsIFwiYmF0XCIsIFwiY2F0XCIsIFwiZG9nXCJdXG4gICAqICAgYS5kZWxldGVBdCgyKSAgICAvLyA9PiBcImNhdFwiXG4gICAqICAgYSAgICAgICAgICAgICAgICAvLyA9PiBbXCJhbnRcIiwgXCJiYXRcIiwgXCJkb2dcIl1cbiAgICogICBhLmRlbGV0ZUF0KDk5KSAgIC8vID0+IHVuZGVmaW5lZCAoYmVjYXVzZSBpbmRleCA5OSBub3QgZm91bmQpXG4gICAqICAgaWYoYS5kZWxldGVBdCgxKSkgY29uc29sZS5sb2coJ2l0ZW0gd2l0aCBpbmRleCAxIHJlbW92ZWQnKSAvLyBjb25kaXRpb25hbFxuICAgKi9cbiAgZGVsZXRlQXQobjogbnVtYmVyKTogQXJyYXk8VD47XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgbnVsbCAgYW5kIHVuZGVmaW5lZCAgZWxlbWVudHMgZnJvbSB0aGUgYXJyYXksIHR1cm5pbmcgaXQgaW50byBhIGRlbnNlIGFycmF5LlxuICAgKiBSZXR1cm5zIHNlbGYgZm9yIGNoYWluaW5nIHB1cnBvc2VzXG4gICAqL1xuICBjb21wYWN0KCk6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBDaGVjayBlbGVtZW50IGluZGV4IGV4aXN0c1xuICAgKiBAZXhhbXBsZVxuICAgKiBbJ2EnLCdiJ10uZXhpc3RzKDEpOyAvL3RydWVcbiAgICogWydhJywnYiddLmV4aXN0cyg0KTsgLy9mYWxzZVxuICAgKi9cbiAgZXhpc3RzKG46IG51bWJlcik6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIENoZWNrIGFycmF5IGNvbnRhaW5zIHN0cmluZy9hbnlcbiAgICogQHBhcmFtIG9ialxuICAgKiBAZXhhbXBsZVxuICAgKiBhbGVydChbMSwgMiwgM10uY29udGFpbnMoMikpOyAvLyA9PiB0cnVlXG4gICAqIGFsZXJ0KFsxLCAyLCAzXS5jb250YWlucygnMicpKTsgLy8gPT4gZmFsc2VcbiAgICovXG4gIGNvbnRhaW5zKG9iajogYW55KTogYm9vbGVhbjtcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYXJyYXkgb2Zmc2V0IChpbmRleCkgZXhpc3RzXG4gICAqIEBwYXJhbSBuXG4gICAqIEBleGFtcGxlXG4gICAqIGFsZXJ0KFt7fSwnYScsJ3gnXS5oYXNJbmRleCgyKSk7IC8vID0+IHRydWUgLSBhcnJheSBoYXMgb2Zmc2V0IDIgaXMgJ3gnXG4gICAqIGFsZXJ0KFt7fSwnYScsJ3gnXS5oYXNJbmRleCgzKSk7IC8vID0+IGZhbHNlXG4gICAqL1xuICBoYXNJbmRleChuOiBudW1iZXIpOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBTaHVmZmxlIGFycmF5cy5cbiAgICogQGRlc2NyaXB0aW9uIFJhbmRvbWl6ZSBhcnJheSBlbGVtZW50c1xuICAgKiBAZXhhbXBsZVxuICAgKiBhbGVydChbMSwyLDMsNCw1XS5zaHVmZmxlKCkpXG4gICAqL1xuICBzaHVmZmxlKCk6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiBSZW1vdmUgbnVsbCwgZW1wdHkgc3RyaW5nLCBvciB1bmRlZmluZWQgdmFsdWVzXG4gICAqL1xuICByZW1vdmVFbXB0aWVzKCk6IEFycmF5PFQ+O1xuXG4gIC8qKlxuICAgKiB0cmltIGFycmF5IG9mIHN0cmluZ3NcbiAgICovXG4gIHRyaW0oKTogQXJyYXk8c3RyaW5nPjtcbn1cblxuQXJyYXkucHJvdG90eXBlLnNodWZmbGUgPSBmdW5jdGlvbiAoKSB7XG4gIGxldCBpID0gdGhpcy5sZW5ndGgsXG4gICAgajogbnVtYmVyLFxuICAgIHRlbXA6IGFueTtcbiAgaWYgKGkgPT0gMCkgcmV0dXJuIHRoaXM7XG4gIHdoaWxlICgtLWkpIHtcbiAgICBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgdGVtcCA9IHRoaXNbaV07XG4gICAgdGhpc1tpXSA9IHRoaXNbal07XG4gICAgdGhpc1tqXSA9IHRlbXA7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5BcnJheS5wcm90b3R5cGUubGFzdCA9IGZ1bmN0aW9uIChuKSB7XG4gIGlmICghbikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzW3RoaXMubGVuZ3RoIC0gMV07XG4gIH0gZWxzZSB7XG4gICAgbGV0IHN0YXJ0ID0gdGhpcy5sZW5ndGggLSBuO1xuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMDtcblxuICAgIHJldHVybiB0aGlzLnNsaWNlKHN0YXJ0LCB0aGlzLmxlbmd0aCk7XG4gIH1cbn07XG5cbkFycmF5LnByb3RvdHlwZS50cmltID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpcy5tYXAoKHN0cikgPT4ge1xuICAgIGlmICh0eXBlb2Ygc3RyID09ICdzdHJpbmcnKSByZXR1cm4gc3RyLnRyaW0oKTtcbiAgfSk7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuaXNFbXB0eSA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXMubGVuZ3RoID09PSAwO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnJhbmdlID0gZnVuY3Rpb24gKHN0YXJ0LCBlbmQpIHtcbiAgaWYgKGVuZCA8IHN0YXJ0KSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIHJldHVybiB0aGlzLnNsaWNlKHN0YXJ0LCBlbmQgKyAxKTtcbn07XG5cbkFycmF5LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICB0aGlzLnB1c2goZWxlbWVudCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuQXJyYXkucHJvdG90eXBlLmFkZEFsbCA9IGZ1bmN0aW9uICguLi5vdGhlckFycmF5cykge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgb3RoZXJBcnJheXMuZm9yRWFjaChmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBhcnJheS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICBzZWxmLnB1c2goaXRlbSk7XG4gICAgfSk7XG4gIH0pO1xuICByZXR1cm4gc2VsZjtcbn07XG5cbkFycmF5LnByb3RvdHlwZS5yYW5kb20gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHRoaXMubGVuZ3RoKV07XG59O1xuXG5BcnJheS5wcm90b3R5cGUudW5pcXVlID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PGFueT4pIHtcbiAgY29uc3QgYSA9IHRoaXMuY29uY2F0KCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGEubGVuZ3RoOyArK2opIHtcbiAgICAgIGlmIChhW2ldID09PSBhW2pdKSBhLnNwbGljZShqLS0sIDEpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnVuaXF1ZVN0cmluZ0FycmF5ID0gZnVuY3Rpb24gKHRoaXM6IEFycmF5PHN0cmluZz4pIHtcbiAgY29uc3QgZmlsdGVyID0gbmV3IE1hcCh0aGlzLm1hcCgocykgPT4gW3MudG9Mb3dlckNhc2UoKSwgc10pKTtcbiAgcmV0dXJuIFsuLi5maWx0ZXIudmFsdWVzKCldO1xufTtcblxuQXJyYXkucHJvdG90eXBlLnVuaXF1ZU9iamVjdEtleSA9IGZ1bmN0aW9uICh0aGlzOiBBcnJheTxSZWNvcmQ8c3RyaW5nLCB1bmtub3duPj4sIGtleSwgcmVtb3ZlTnVsbCA9IHRydWUpIHtcbiAgaWYgKCFrZXkpIHJldHVybiB0aGlzO1xuICBjb25zdCByZXNBcnIgPSBbXTtcbiAgdGhpcy5maWx0ZXIoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBjb25zdCBpID0gcmVzQXJyLmZpbmRJbmRleCgoeCkgPT4geFtrZXldID09IGl0ZW1ba2V5XSk7XG4gICAgaWYgKGkgPD0gLTEpIHtcbiAgICAgIGlmIChyZW1vdmVOdWxsKSB7XG4gICAgICAgIGlmIChpdGVtW2tleV0pIHJlc0Fyci5wdXNoKGl0ZW0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzQXJyLnB1c2goaXRlbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9KTtcbiAgcmV0dXJuIHJlc0Fycjtcbn07XG5cbkFycmF5LnByb3RvdHlwZS5jb250YWlucyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgbGV0IGkgPSB0aGlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICh0aGlzW2ldID09PSBvYmopIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59O1xuXG5BcnJheS5wcm90b3R5cGUuaGFzSW5kZXggPSBmdW5jdGlvbiAobjogbnVtYmVyKSB7XG4gIHJldHVybiB0eXBlb2YgdGhpc1tuXSAhPSAndW5kZWZpbmVkJztcbn07XG5cbkFycmF5LnByb3RvdHlwZS5maXJzdCA9IGZ1bmN0aW9uIChuKSB7XG4gIGlmICghbikge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgIHJldHVybiB0aGlzWzBdO1xuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIFtdO1xuXG4gICAgcmV0dXJuIHRoaXMuc2xpY2UoMCwgbik7XG4gIH1cbn07XG5cbkFycmF5LnByb3RvdHlwZS5jb21wYWN0ID0gZnVuY3Rpb24gKCkge1xuICAvL3ZhciBjaGFuZ2VzID0gZmFsc2U7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIC8vIElmIGVsZW1lbnQgaXMgbm9uLWV4aXN0ZW50LCB1bmRlZmluZWQgb3IgbnVsbCwgcmVtb3ZlIGl0LlxuICAgIGlmICghdGhpc1tpXSkge1xuICAgICAgdGhpcy5zcGxpY2UoaSwgMSk7XG4gICAgICBpID0gaSAtIDE7XG4gICAgICAvL2NoYW5nZXMgPSB0cnVlO1xuICAgIH1cbiAgfVxuICAvL2lmICghY2hhbmdlcykgcmV0dXJuIHVuZGVmaW5lZDtcblxuICByZXR1cm4gdGhpcztcbn07XG5cbkFycmF5LnByb3RvdHlwZS5kZWxldGVBdCA9IGZ1bmN0aW9uIDxUPih0aGlzOiBUW10sIGluZGV4KTogVCB7XG4gIGlmIChpbmRleCA8IDApIGluZGV4ID0gdGhpcy5sZW5ndGggKyBpbmRleDtcblxuICAvLyBJZiBlbGVtZW50IGlzIG5vbi1leGlzdGVudCwgcmV0dXJuIHVuZGVmaW5lZDpcbiAgaWYgKCF0aGlzLmhhc093blByb3BlcnR5KGluZGV4KSkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICBjb25zdCBlbGVtID0gdGhpc1tpbmRleF07XG4gIHRoaXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgcmV0dXJuIGVsZW07XG59O1xuXG5BcnJheS5wcm90b3R5cGUudW5zZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHRoaXMuaW5kZXhPZih2YWx1ZSkgIT0gLTEpIHtcbiAgICAvLyBNYWtlIHN1cmUgdGhlIHZhbHVlIGV4aXN0c1xuICAgIHRoaXMuc3BsaWNlKHRoaXMuaW5kZXhPZih2YWx1ZSksIDEpO1xuICB9XG4gIHJldHVybiB0aGlzO1xufTtcblxuQXJyYXkucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uIChuOiBudW1iZXIpIHtcbiAgcmV0dXJuIHR5cGVvZiB0aGlzW25dICE9PSAndW5kZWZpbmVkJztcbn07XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmhhc093blByb3BlcnR5KCdldmVyeScpKSB7XG4gIEFycmF5LnByb3RvdHlwZS5ldmVyeSA9IGZ1bmN0aW9uIChmdW46IGFueSAvKiwgdGhpc3AgKi8pIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgY29uc3QgdDogeyBbeDogc3RyaW5nXTogYW55OyBsZW5ndGg6IG51bWJlciB9ID0gT2JqZWN0KHRoaXMpO1xuICAgIGNvbnN0IGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuICAgIGxldCBpOiBzdHJpbmcgfCBudW1iZXI7XG4gICAgY29uc3QgdGhpc3A6IGFueSA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmICh0aGlzID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGZ1biAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigpO1xuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgaWYgKGkgaW4gdCAmJiAhZnVuLmNhbGwodGhpc3AsIHRbaV0sIGksIHQpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcbn1cblxuQXJyYXkucHJvdG90eXBlLm1vdmUgPSBmdW5jdGlvbiAoZnJvbSwgdG8pIHtcbiAgY29uc3QgaXRlbVJlbW92ZWQgPSB0aGlzLnNwbGljZShmcm9tLCAxKTsgLy8gc3BsaWNlKCkgcmV0dXJucyB0aGUgcmVtb3ZlIGVsZW1lbnQgYXMgYW4gYXJyYXlcbiAgdGhpcy5zcGxpY2UodG8sIDAsIGl0ZW1SZW1vdmVkWzBdKTsgLy8gSW5zZXJ0IGl0ZW1SZW1vdmVkIGludG8gdGhlIHRhcmdldCBpbmRleFxuICByZXR1cm4gdGhpcztcbn07XG5cbkFycmF5LnByb3RvdHlwZS5oYXB1c0l0ZW1EYXJpQXJyYXlMYWluID0gZnVuY3Rpb24gKHRoaXM6IGFueVtdLCAuLi5hcnJheUxhaW4pIHtcbiAgbGV0IHRoaXNBcnIgPSB0aGlzO1xuICBhcnJheUxhaW4uZm9yRWFjaCgob3RoZXJBcnIpID0+IHtcbiAgICB0aGlzQXJyID0gdGhpc0Fyci5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICByZXR1cm4gIW90aGVyQXJyLmluY2x1ZGVzKGVsKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIHRoaXNBcnI7XG59O1xuXG5BcnJheS5wcm90b3R5cGUucmVtb3ZlRW1wdGllcyA9IGZ1bmN0aW9uICh0aGlzOiBhbnlbXSkge1xuICBjb25zdCBmaWx0ZXIgPSB0aGlzLmZpbHRlcihmdW5jdGlvbiAoZWw6IHN0cmluZyB8IGFueSkge1xuICAgIGNvbnN0IG5vdG51bGwgPVxuICAgICAgLy8gbWFrZSBzdXJlIGVsZW1lbnQgaXMgbm90IG51bGxcbiAgICAgIGVsICE9IG51bGwgJiZcbiAgICAgIC8vIG1ha2Ugc3VyZSBlbGVtZW50IGlzIG5vdCB1bmRlZmluZWRcbiAgICAgIHR5cGVvZiBlbCAhPSAndW5kZWZpbmVkJztcbiAgICAvLyBpZiBlbGVtZW50IGlzIHN0cmluZywgbWFrZSBzdXJlIHN0cmluZyBsZW5ndGggbm90IHplcm9cbiAgICBpZiAodHlwZW9mIGVsID09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gbm90bnVsbCAmJiBlbC50cmltKCkubGVuZ3RoID4gMDtcbiAgICB9XG4gICAgcmV0dXJuIG5vdG51bGw7XG4gIH0pO1xuICByZXR1cm4gZmlsdGVyO1xufTtcblxuZnVuY3Rpb24gYXJyYXlfZmlsdGVyKGFycmF5OiBbXSkge1xuICByZXR1cm4gYXJyYXkuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgIHJldHVybiBlbCAhPSBudWxsO1xuICB9KTtcbn1cbl9nbG9iYWwuYXJyYXlfZmlsdGVyID0gYXJyYXlfZmlsdGVyO1xuXG4vKipcbiAqIHBpY2sgcmFuZG9tIGZyb20gYXJyYXlcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyYXlzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IHVuaXF1ZSBVbmlxdWUgdGhlIGFycmF5c1xuICovXG5mdW5jdGlvbiBhcnJheV9yYW5kKGFycmF5czogYW55W10sIHVuaXF1ZTogYW55KSB7XG4gIGlmICh1bmlxdWUpIHtcbiAgICBhcnJheXMgPSBhcnJheV91bmlxdWUoYXJyYXlzKTtcbiAgfVxuICBjb25zdCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGFycmF5cy5sZW5ndGgpO1xuICByZXR1cm4ge1xuICAgIGluZGV4OiBpbmRleCxcbiAgICB2YWx1ZTogYXJyYXlzW2luZGV4XSxcbiAgfTtcbn1cbl9nbG9iYWwuYXJyYXlfcmFuZCA9IGFycmF5X3JhbmQ7XG5cbi8qKlxuICogQXJyYXkgdW5pcXVlXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFycmF5c1xuICovXG5mdW5jdGlvbiBhcnJheV91bmlxdWUoYXJyYXlzOiBhbnlbXSkge1xuICByZXR1cm4gYXJyYXlzLmZpbHRlcihmdW5jdGlvbiAoaXRlbTogYW55LCBwb3M6IGFueSwgc2VsZjogc3RyaW5nIHwgYW55W10pIHtcbiAgICByZXR1cm4gc2VsZi5pbmRleE9mKGl0ZW0pID09IHBvcztcbiAgfSk7XG59XG5fZ2xvYmFsLmFycmF5X3VuaXF1ZSA9IGFycmF5X3VuaXF1ZTtcblxuLyoqXG4gKiBVbnNldCBhcnJheVxuICogQHBhcmFtIHtBcnJheTxhbnk+fSBhcnJheU5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfG51bWJlcn0ga2V5XG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW51c2VkLXZhcnNcbmZ1bmN0aW9uIGFycmF5X3Vuc2V0KGFycmF5TmFtZTogeyBbeDogc3RyaW5nXTogYW55IH0sIGtleTogYW55KSB7XG4gIGxldCB4OiBzdHJpbmcgfCBudW1iZXI7XG4gIGNvbnN0IHRtcEFycmF5ID0gW107XG4gIGZvciAoeCBpbiBhcnJheU5hbWUpIHtcbiAgICBpZiAoeCAhPSBrZXkpIHtcbiAgICAgIHRtcEFycmF5W3hdID0gYXJyYXlOYW1lW3hdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdG1wQXJyYXk7XG59XG5fZ2xvYmFsLmFycmF5X3Vuc2V0ID0gYXJyYXlfdW5zZXQ7XG5cbi8qKlxuICogUEhQIHNodWZmbGUgYXJyYXkgZXF1aXZhbGVudFxuICogQHBhcmFtIGFycmF5XG4gKiBAZXhhbXBsZVxuICogdmFyIGFyciA9IFsyLCAxMSwgMzcsIDQyXTtcbiAqIHNodWZmbGUoYXJyKTtcbiAqIGNvbnNvbGUubG9nKGFycik7IC8vcmV0dXJuIHJhbmRvbVxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzXG5mdW5jdGlvbiBzaHVmZmxlKGFycmF5OiBBcnJheTxhbnk+KSB7XG4gIGxldCBjdXJyZW50SW5kZXggPSBhcnJheS5sZW5ndGgsXG4gICAgdGVtcG9yYXJ5VmFsdWU6IGFueSxcbiAgICByYW5kb21JbmRleDogbnVtYmVyO1xuXG4gIC8vIFdoaWxlIHRoZXJlIHJlbWFpbiBlbGVtZW50cyB0byBzaHVmZmxlLi4uXG4gIHdoaWxlICgwICE9PSBjdXJyZW50SW5kZXgpIHtcbiAgICAvLyBQaWNrIGEgcmVtYWluaW5nIGVsZW1lbnQuLi5cbiAgICByYW5kb21JbmRleCA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGN1cnJlbnRJbmRleCk7XG4gICAgY3VycmVudEluZGV4IC09IDE7XG5cbiAgICAvLyBBbmQgc3dhcCBpdCB3aXRoIHRoZSBjdXJyZW50IGVsZW1lbnQuXG4gICAgdGVtcG9yYXJ5VmFsdWUgPSBhcnJheVtjdXJyZW50SW5kZXhdO1xuICAgIGFycmF5W2N1cnJlbnRJbmRleF0gPSBhcnJheVtyYW5kb21JbmRleF07XG4gICAgYXJyYXlbcmFuZG9tSW5kZXhdID0gdGVtcG9yYXJ5VmFsdWU7XG4gIH1cblxuICByZXR1cm4gYXJyYXk7XG59XG5fZ2xvYmFsLnNodWZmbGUgPSBzaHVmZmxlO1xuXG5mdW5jdGlvbiBhcnJheUNvbXBhcmUoYTE6IEFycmF5PGFueT4sIGEyOiBBcnJheTxhbnk+KSB7XG4gIGlmIChhMS5sZW5ndGggIT0gYTIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gIGNvbnN0IGxlbmd0aCA9IGEyLmxlbmd0aDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGlmIChhMVtpXSAhPT0gYTJbaV0pIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbl9nbG9iYWwuYXJyYXlDb21wYXJlID0gYXJyYXlDb21wYXJlO1xuXG4vKipcbiAqIGluX2FycmF5IFBIUCBlcXVpdmFsZW50XG4gKiBAcGFyYW0gbmVlZGxlIHN0cmluZyBldGNcbiAqIEBwYXJhbSBoYXlzdGFja1xuICovXG5mdW5jdGlvbiBpbkFycmF5KG5lZWRsZTogYW55LCBoYXlzdGFjazogQXJyYXk8YW55Pikge1xuICBjb25zdCBsZW5ndGggPSBoYXlzdGFjay5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIGhheXN0YWNrW2ldID09ICdvYmplY3QnKSB7XG4gICAgICBpZiAoYXJyYXlDb21wYXJlKGhheXN0YWNrW2ldLCBuZWVkbGUpKSByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGhheXN0YWNrW2ldID09IG5lZWRsZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiBpbl9hcnJheSBQSFAgZXF1aXZhbGVudFxuICogQHBhcmFtIG5lZWRsZSBzdHJpbmcgZXRjXG4gKiBAcGFyYW0gaGF5c3RhY2tcbiAqL1xuZnVuY3Rpb24gaW5fYXJyYXkobmVlZGxlOiBhbnksIGhheXN0YWNrOiBBcnJheTxhbnk+KSB7XG4gIHJldHVybiBpbkFycmF5KG5lZWRsZSwgaGF5c3RhY2spO1xufVxuX2dsb2JhbC5pbl9hcnJheSA9IGluX2FycmF5O1xuXG4vKipcbiAqIGdldCBhbGwga2V5c1xuICogQHBhcmFtIGhheXN0YWNrIHN0cmluZyBldGNcbiAqL1xuZnVuY3Rpb24gYXJyYXlfa2V5cyhoYXlzdGFjazogYW55KSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhoYXlzdGFjayk7XG59XG5cbi8qKlxuICogU2h1ZmZsZXMgYXJyYXkgaW4gcGxhY2UuXG4gKiBAcGFyYW0gYSBpdGVtcyBBbiBhcnJheSBjb250YWluaW5nIHRoZSBpdGVtcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlfc2h1ZmZsZShhOiBBcnJheTxhbnk+KSB7XG4gIGxldCBqOiBudW1iZXIsIHg6IGFueSwgaTogbnVtYmVyO1xuICBmb3IgKGkgPSBhLmxlbmd0aCAtIDE7IGkgPiAwOyBpLS0pIHtcbiAgICBqID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKGkgKyAxKSk7XG4gICAgeCA9IGFbaV07XG4gICAgYVtpXSA9IGFbal07XG4gICAgYVtqXSA9IHg7XG4gIH1cbiAgcmV0dXJuIGE7XG59XG5fZ2xvYmFsLmFycmF5X3NodWZmbGUgPSBhcnJheV9zaHVmZmxlO1xuXG4vKipcbiAqIERlZXAgbWVyZ2UgdHdvIG9yIG1vcmUgb2JqZWN0cyBpbnRvIHRoZSBmaXJzdC5cbiAqIChjKSAyMDIxIENocmlzIEZlcmRpbmFuZGksIE1JVCBMaWNlbnNlLCBodHRwczovL2dvbWFrZXRoaW5ncy5jb21cbiAqIEBwYXJhbSBvYmplY3RzICBUaGUgb2JqZWN0cyB0byBtZXJnZSB0b2dldGhlclxuICogQHJldHVybnMgTWVyZ2VkIHZhbHVlcyBvZiBkZWZhdWx0cyBhbmQgb3B0aW9uc1xuICovXG5mdW5jdGlvbiBkZWVwQXNzaWduKC4uLm9iamVjdHM6IFJlY29yZDxhbnksIHVua25vd24+W10pOiBSZWNvcmQ8YW55LCB1bmtub3duPiB7XG4gIC8vIE1ha2Ugc3VyZSB0aGVyZSBhcmUgb2JqZWN0cyB0byBtZXJnZVxuICBjb25zdCBsZW4gPSBvYmplY3RzLmxlbmd0aDtcbiAgaWYgKGxlbiA8IDEpIHJldHVybjtcbiAgaWYgKGxlbiA8IDIpIHJldHVybiBvYmplY3RzWzBdO1xuXG4gIC8vIE1lcmdlIGFsbCBvYmplY3RzIGludG8gZmlyc3RcbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBsZW47IGkrKykge1xuICAgIGZvciAoY29uc3Qga2V5IGluIG9iamVjdHNbaV0pIHtcbiAgICAgIGlmIChvYmplY3RzW2ldLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgLy8gSWYgaXQncyBhbiBvYmplY3QsIHJlY3Vyc2l2ZWx5IG1lcmdlXG4gICAgICAgIC8vIE90aGVyd2lzZSwgcHVzaCB0byBrZXlcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmplY3RzW2ldW2tleV0pID09PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgICAgIG9iamVjdHNbMF1ba2V5XSA9IGRlZXBBc3NpZ24oPGFueT5vYmplY3RzWzBdW2tleV0gfHwge30sIDxhbnk+b2JqZWN0c1tpXVtrZXldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvYmplY3RzWzBdW2tleV0gPSBvYmplY3RzW2ldW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXJndW1lbnRzWzBdO1xufVxuX2dsb2JhbC5kZWVwQXNzaWduID0gZGVlcEFzc2lnbjtcblxuLyoqXG4gKiBSZW1vdmUgaXRlbSBmcm9tIGFycmF5XG4gKiBAcGFyYW0gYXJyXG4gKiBAcGFyYW0gdmFsdWVcbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUl0ZW08VD4oYXJyOiBBcnJheTxUPiwgdmFsdWU6IFQpOiBBcnJheTxUPiB7XG4gIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YodmFsdWUpO1xuICBpZiAoaW5kZXggPiAtMSkge1xuICAgIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICB9XG4gIHJldHVybiBhcnI7XG59XG5fZ2xvYmFsLnJlbW92ZUl0ZW0gPSByZW1vdmVJdGVtO1xuIl19
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * Get all method from class
 * @param toCheck
 * @returns
 */
const getAllMethods = function (toCheck) {
    if (!toCheck)
        return [];
    try {
        const props = [];
        let obj = toCheck;
        do {
            props.push(...Object.getOwnPropertyNames(obj));
        } while ((obj = Object.getPrototypeOf(obj)));
        return props
            .sort()
            .filter((e, i, arr_fname) => {
            const c = toCheck[e];
            const fname = arr_fname[i + 1];
            if (e != fname && typeof c == 'function')
                return true;
        })
            .filter((fname) => {
            return ![
                '__defineGetter__',
                '__defineSetter__',
                '__lookupGetter__',
                '__lookupSetter__',
                'constructor',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'toLocaleString',
                'toString',
                'valueOf',
            ].includes(fname);
        });
    }
    catch (e) {
        return Object.getOwnPropertyNames(toCheck).filter((prop) => typeof toCheck[prop] === 'function');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3REOzs7O0dBSUc7QUFDSCxNQUFNLGFBQWEsR0FBRyxVQUFVLE9BQStCO0lBQzdELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDeEIsSUFBSTtRQUNGLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDbEIsR0FBRztZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRCxRQUFRLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUM3QyxPQUFPLEtBQUs7YUFDVCxJQUFJLEVBQUU7YUFDTixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxHQUFtQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksT0FBTyxDQUFDLElBQUksVUFBVTtnQkFBRSxPQUFPLElBQUksQ0FBQztRQUN4RCxDQUFDLENBQUM7YUFDRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQixPQUFPLENBQUM7Z0JBQ04sa0JBQWtCO2dCQUNsQixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsa0JBQWtCO2dCQUNsQixhQUFhO2dCQUNiLGdCQUFnQjtnQkFDaEIsZUFBZTtnQkFDZixzQkFBc0I7Z0JBQ3RCLGdCQUFnQjtnQkFDaEIsVUFBVTtnQkFDVixTQUFTO2FBQ1YsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7S0FDTjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztLQUNsRztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBHZXQgYWxsIG1ldGhvZCBmcm9tIGNsYXNzXG4gKiBAcGFyYW0gdG9DaGVja1xuICogQHJldHVybnNcbiAqL1xuY29uc3QgZ2V0QWxsTWV0aG9kcyA9IGZ1bmN0aW9uICh0b0NoZWNrOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gIGlmICghdG9DaGVjaykgcmV0dXJuIFtdO1xuICB0cnkge1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgbGV0IG9iaiA9IHRvQ2hlY2s7XG4gICAgZG8ge1xuICAgICAgcHJvcHMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcbiAgICB9IHdoaWxlICgob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpKTtcbiAgICByZXR1cm4gcHJvcHNcbiAgICAgIC5zb3J0KClcbiAgICAgIC5maWx0ZXIoKGUsIGksIGFycl9mbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBjOiBDbGFzc0RlY29yYXRvciA9IHRvQ2hlY2tbZV07XG4gICAgICAgIGNvbnN0IGZuYW1lID0gYXJyX2ZuYW1lW2kgKyAxXTtcbiAgICAgICAgaWYgKGUgIT0gZm5hbWUgJiYgdHlwZW9mIGMgPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigoZm5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuICFbXG4gICAgICAgICAgJ19fZGVmaW5lR2V0dGVyX18nLFxuICAgICAgICAgICdfX2RlZmluZVNldHRlcl9fJyxcbiAgICAgICAgICAnX19sb29rdXBHZXR0ZXJfXycsXG4gICAgICAgICAgJ19fbG9va3VwU2V0dGVyX18nLFxuICAgICAgICAgICdjb25zdHJ1Y3RvcicsXG4gICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgICAndG9Mb2NhbGVTdHJpbmcnLFxuICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICBdLmluY2x1ZGVzKGZuYW1lKTtcbiAgICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRvQ2hlY2spLmZpbHRlcigocHJvcCkgPT4gdHlwZW9mIHRvQ2hlY2tbcHJvcF0gPT09ICdmdW5jdGlvbicpO1xuICB9XG59O1xuIl19
Date.prototype.isHourAgo = function (hour) {
    hour = hour * 60 * 1000; /* ms */
    const hourago = Date.now() - hour;
    return hour > hourago;
};
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}
Date.prototype.addHours = function (h) {
    this.setTime(this.getTime() + h * 60 * 60 * 1000);
    //this.setHours(this.getHours()+h);
    return this;
};
Date.prototype.addHours2 = function (hrs) {
    this.setHours(this.getHours() + hrs);
    return this;
};
class date_ext {
    static datetime_local(date) {
        return new Date(date).toJSON().slice(0, 19);
    }
}
if (typeof window != 'undefined' && window instanceof Window) {
    window.datetime_local = date_ext.datetime_local;
}
else if (typeof global == 'object') {
    global.datetime_local = date_ext.datetime_local;
}
if (typeof module != 'undefined' && typeof module == 'object') {
    module.exports = date_ext;
    module.exports = {
        datetime_local: date_ext.datetime_local,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsSUFBSTtJQUN2QyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbEMsT0FBTyxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUc7UUFDckIsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQztDQUNIO0FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2xELG1DQUFtQztJQUNuQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsR0FBRztJQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNyQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUTtJQUNaLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBNEI7UUFDaEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQUVELElBQUksT0FBTyxNQUFNLElBQUksV0FBVyxJQUFJLE1BQU0sWUFBWSxNQUFNLEVBQUU7SUFDNUQsTUFBTSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO0NBQ2pEO0tBQU0sSUFBSSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUU7SUFDcEMsTUFBTSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO0NBQ2pEO0FBQ0QsSUFBSSxPQUFPLE1BQU0sSUFBSSxXQUFXLElBQUksT0FBTyxNQUFNLElBQUksUUFBUSxFQUFFO0lBQzdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7UUFDZixjQUFjLEVBQUUsUUFBUSxDQUFDLGNBQWM7S0FDeEMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbnRlcmZhY2UgRGF0ZSB7XG4gIGFkZEhvdXJzOiAoaDogbnVtYmVyKSA9PiBEYXRlO1xuICBhZGRIb3VyczI6IChoOiBudW1iZXIpID0+IERhdGU7XG5cbiAgdG9HTVRTdHJpbmcoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBEYXRlIGlzIGBuYCBob3VyIGFnb1xuICAgKiBAcGFyYW0gc291cmNlIG51bWJlciBvZiBob3Vyc1xuICAgKi9cbiAgaXNIb3VyQWdvKHNvdXJjZTogbnVtYmVyKTogYm9vbGVhbjtcbn1cblxuRGF0ZS5wcm90b3R5cGUuaXNIb3VyQWdvID0gZnVuY3Rpb24gKGhvdXIpIHtcbiAgaG91ciA9IGhvdXIgKiA2MCAqIDEwMDA7IC8qIG1zICovXG4gIGNvbnN0IGhvdXJhZ28gPSBEYXRlLm5vdygpIC0gaG91cjtcbiAgcmV0dXJuIGhvdXIgPiBob3VyYWdvO1xufTtcblxuaWYgKCFEYXRlLm5vdykge1xuICBEYXRlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG59XG5EYXRlLnByb3RvdHlwZS5hZGRIb3VycyA9IGZ1bmN0aW9uIChoKSB7XG4gIHRoaXMuc2V0VGltZSh0aGlzLmdldFRpbWUoKSArIGggKiA2MCAqIDYwICogMTAwMCk7XG4gIC8vdGhpcy5zZXRIb3Vycyh0aGlzLmdldEhvdXJzKCkraCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGF0ZS5wcm90b3R5cGUuYWRkSG91cnMyID0gZnVuY3Rpb24gKGhycykge1xuICB0aGlzLnNldEhvdXJzKHRoaXMuZ2V0SG91cnMoKSArIGhycyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuY2xhc3MgZGF0ZV9leHQge1xuICBzdGF0aWMgZGF0ZXRpbWVfbG9jYWwoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKS50b0pTT04oKS5zbGljZSgwLCAxOSk7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93IGluc3RhbmNlb2YgV2luZG93KSB7XG4gIHdpbmRvdy5kYXRldGltZV9sb2NhbCA9IGRhdGVfZXh0LmRhdGV0aW1lX2xvY2FsO1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnKSB7XG4gIGdsb2JhbC5kYXRldGltZV9sb2NhbCA9IGRhdGVfZXh0LmRhdGV0aW1lX2xvY2FsO1xufVxuaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGRhdGVfZXh0O1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkYXRldGltZV9sb2NhbDogZGF0ZV9leHQuZGF0ZXRpbWVfbG9jYWwsXG4gIH07XG59XG4iXX0=
if (typeof document != 'undefined') {
    Document.prototype.listen = function (eventType, listener, options = {}) {
        if (this.addEventListener) {
            this.addEventListener(eventType, listener, options);
        }
        else if (this.attachEvent) {
            this.attachEvent('on' + eventType, listener, options);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxPQUFPLFFBQVEsSUFBSSxXQUFXLEVBQUU7SUFDbEMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFDMUIsU0FBWSxFQUNaLFFBQTBELEVBQzFELE9BQU8sR0FBRyxFQUFFO1FBRVosSUFBZSxJQUFLLENBQUMsZ0JBQWdCLEVBQUU7WUFDMUIsSUFBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDakU7YUFBTSxJQUFlLElBQUssQ0FBQyxXQUFXLEVBQUU7WUFDNUIsSUFBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNuRTtJQUNILENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJykge1xuICBEb2N1bWVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gPEsgZXh0ZW5kcyBrZXlvZiBEb2N1bWVudEV2ZW50TWFwPihcbiAgICBldmVudFR5cGU6IEssXG4gICAgbGlzdGVuZXI6ICh0aGlzOiBEb2N1bWVudCwgZXY6IERvY3VtZW50RXZlbnRNYXBbS10pID0+IGFueSxcbiAgICBvcHRpb25zID0ge31cbiAgKSB7XG4gICAgaWYgKCg8RG9jdW1lbnQ+dGhpcykuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgKDxEb2N1bWVudD50aGlzKS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoKDxEb2N1bWVudD50aGlzKS5hdHRhY2hFdmVudCkge1xuICAgICAgKDxEb2N1bWVudD50aGlzKS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xufVxuIl19
if (!('toJSON' in Error.prototype)) {
    // https://stackoverflow.com/a/18391400/6404439
    Object.defineProperty(Error.prototype, 'toJSON', {
        value: function () {
            const alt = {};
            Object.getOwnPropertyNames(this).forEach(function (key) {
                alt[key] = this[key];
            }, this);
            return alt;
        },
        configurable: true,
        writable: true,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtJQUNsQywrQ0FBK0M7SUFDL0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtRQUMvQyxLQUFLLEVBQUU7WUFDTCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFFZixNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRztnQkFDcEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFVCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFDRCxZQUFZLEVBQUUsSUFBSTtRQUNsQixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKCEoJ3RvSlNPTicgaW4gRXJyb3IucHJvdG90eXBlKSkge1xuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgzOTE0MDAvNjQwNDQzOVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXJyb3IucHJvdG90eXBlLCAndG9KU09OJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBhbHQgPSB7fTtcblxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGFsdFtrZXldID0gdGhpc1trZXldO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIHJldHVybiBhbHQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gIH0pO1xufVxuIl19
"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */

Object.defineProperty(exports, "__esModule", { value: true });
Function.prototype.once = function (param) {
    if (!this.wasCalled) {
        this.apply(param);
        this.wasCalled = true;
    }
};
/**
 * Run the function only once
 * @param fn
 * @see {@link https://stackoverflow.com/a/41000535/6404439}
 * @returns
 */
function runOnce(fn) {
    let done = false;
    return function (...args) {
        if (!done) {
            done = true;
            return fn.apply(this, args);
        }
    };
}
if (typeof module.exports != 'undefined') {
    module.exports = {
        runOnce,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNEQUFzRDtBQUN0RCx1Q0FBdUM7O0FBMEJ2QyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUEwQixLQUFNO0lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDdkI7QUFDSCxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILFNBQVMsT0FBTyxDQUFDLEVBQVk7SUFDM0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLE9BQU8sVUFBVSxHQUFHLElBQVM7UUFDM0IsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULElBQUksR0FBRyxJQUFJLENBQUM7WUFDWixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxJQUFJLFdBQVcsRUFBRTtJQUN4QyxNQUFNLENBQUMsT0FBTyxHQUFHO1FBQ2YsT0FBTztLQUNSLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZ2xvYmFscy5kLnRzXCIgLz5cblxuaW50ZXJmYWNlIENhbGxhYmxlIHtcbiAgKHRleHQ6IHN0cmluZyk6IHZvaWQ7XG4gIC8qKlxuICAgKiBpbmRpY2F0b3IgaWYgdGhpcyBmdW5jdGlvbiB3YXMgY2FsbGVkXG4gICAqL1xuICB3YXNDYWxsZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENsYXNzIENhbGxhYmxlIERlY29yYXRvclxuICogQGV4YW1wbGVcbiAqIC8vIGRlZmluaXRpb24gZm9yIGJlbG93IGNsYXNzZXNcbiAqIC8vIGNhbiBiZSBjYWxsZWQgd2l0aCBgbmV3YFxuICogbmV3IHlvdXJjbGFzcygpO1xuICogbmV3IHlvdXJjbGFzcyhhcmcsIGFyZzEpO1xuICogLy8gY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBsaWtlIGZ1bmN0aW9uXG4gKiB5b3VyY2xhc3MoKTtcbiAqIHlvdXJjbGFzcyhhcmcsIGFyZzEpO1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzQ2FsbGFibGUgZXh0ZW5kcyBDYWxsYWJsZSB7XG4gIG5ldyAoLi4uYXJnczogYW55W10pOiBDbGFzc0RlY29yYXRvcjtcbiAgbmV3ICgpOiBDbGFzc0RlY29yYXRvcjtcbn1cblxuRnVuY3Rpb24ucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAodGhpczogQ2FsbGFibGUsIHBhcmFtPykge1xuICBpZiAoIXRoaXMud2FzQ2FsbGVkKSB7XG4gICAgdGhpcy5hcHBseShwYXJhbSk7XG4gICAgdGhpcy53YXNDYWxsZWQgPSB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIFJ1biB0aGUgZnVuY3Rpb24gb25seSBvbmNlXG4gKiBAcGFyYW0gZm5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MTAwMDUzNS82NDA0NDM5fVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gcnVuT25jZShmbjogQ2FsbGFibGUpIHtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzOiBhbnkpIHtcbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfTtcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBydW5PbmNlLFxuICB9O1xufVxuIl19
/* eslint-disable @typescript-eslint/no-unused-vars */
/*declare let Navigator: {
  prototype: Navigator;
  new (): Navigator;
};*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF2aWdhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL05hdmlnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQ7OztJQUdJIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKmRlY2xhcmUgbGV0IE5hdmlnYXRvcjoge1xuICBwcm90b3R5cGU6IE5hdmlnYXRvcjtcbiAgbmV3ICgpOiBOYXZpZ2F0b3I7XG59OyovXG5cbmludGVyZmFjZSBOYXZpZ2F0b3JBdXRvbWF0aW9uSW5mb3JtYXRpb24ge1xuICByZWFkb25seSB3ZWJkcml2ZXI6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JCZWFjb24ge1xuICBzZW5kQmVhY29uKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGRhdGE/OlxuICAgICAgfCBCbG9iXG4gICAgICB8IEludDhBcnJheVxuICAgICAgfCBJbnQxNkFycmF5XG4gICAgICB8IEludDMyQXJyYXlcbiAgICAgIHwgVWludDhBcnJheVxuICAgICAgfCBVaW50MTZBcnJheVxuICAgICAgfCBVaW50MzJBcnJheVxuICAgICAgfCBVaW50OENsYW1wZWRBcnJheVxuICAgICAgfCBGbG9hdDMyQXJyYXlcbiAgICAgIHwgRmxvYXQ2NEFycmF5XG4gICAgICB8IERhdGFWaWV3XG4gICAgICB8IEFycmF5QnVmZmVyXG4gICAgICB8IEZvcm1EYXRhXG4gICAgICB8IHN0cmluZ1xuICAgICAgfCBudWxsXG4gICk6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JDb25jdXJyZW50SGFyZHdhcmUge1xuICByZWFkb25seSBoYXJkd2FyZUNvbmN1cnJlbmN5OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JDb250ZW50VXRpbHMge1xuICByZWdpc3RlclByb3RvY29sSGFuZGxlcihzY2hlbWU6IHN0cmluZywgdXJsOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIHVucmVnaXN0ZXJQcm90b2NvbEhhbmRsZXIoc2NoZW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIE5hdmlnYXRvckNvb2tpZXMge1xuICByZWFkb25seSBjb29raWVFbmFibGVkOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgTmF2aWdhdG9ySUQge1xuICByZWFkb25seSBhcHBDb2RlTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBhcHBOYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFwcFZlcnNpb246IHN0cmluZztcbiAgcmVhZG9ubHkgb3NjcHU6IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBwbGF0Zm9ybSBuYW1lXG4gICAqL1xuICByZWFkb25seSBwbGF0Zm9ybTogc3RyaW5nO1xuICByZWFkb25seSBwcm9kdWN0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb2R1Y3RTdWI6IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBicm93c2VyIHVzZXJhZ2VudFxuICAgKi9cbiAgcmVhZG9ubHkgdXNlckFnZW50OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBHZXQgYnJvd3NlciB2ZW5kb3JcbiAgICovXG4gIHJlYWRvbmx5IHZlbmRvcjogc3RyaW5nO1xuICByZWFkb25seSB2ZW5kb3JTdWI6IHN0cmluZztcblxuICB0YWludEVuYWJsZWQoKTogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIE5hdmlnYXRvckxhbmd1YWdlIHtcbiAgcmVhZG9ubHkgbGFuZ3VhZ2U6IHN0cmluZztcbiAgcmVhZG9ubHkgbGFuZ3VhZ2VzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JPbkxpbmUge1xuICByZWFkb25seSBvbkxpbmU6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JQbHVnaW5zIHtcbiAgcmVhZG9ubHkgbWltZVR5cGVzOiBNaW1lVHlwZUFycmF5O1xuICByZWFkb25seSBwbHVnaW5zOiBQbHVnaW5BcnJheTtcblxuICBqYXZhRW5hYmxlZCgpOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgTmF2aWdhdG9yU3RvcmFnZSB7XG4gIHJlYWRvbmx5IHN0b3JhZ2U6IFN0b3JhZ2VNYW5hZ2VyO1xufVxuIl19
Number.prototype.getMS = function (type) {
    const self = this;
    return this * 60 * 1000;
};
Number.prototype.addHour = function (source) {
    const self = this;
    const Hour = this * 60 * 1000; /* ms */
    if (!source)
        source = new Date();
    return new Date(source.getTime() + Hour).getTime();
};
Number.prototype.AddZero = function (b, c) {
    const l = String(b || 10).length - String(this).length + 1;
    return l > 0 ? new Array(l).join(c || "0") + this : this;
};
/**
 * Odd or Even (Ganjil Genap);
 * @param n
 * @param type odd or even
 */
function oddoreven(n, type) {
    if (!type) {
        type = "odd";
    }
    const time = !n ? new Date().getDay() : Number(n);
    if (!/^-?\d+jQuery/.test(time.toString())) {
        alert("arguments is not number, please remove quote");
        return null;
    }
    const hasil = time % 2;
    const rType = /^(odd|ganjil)$/.test(type) ? "1" : "0";
    //return hasil == (type == ('odd' || 'ganjil') ? 1 : 0);
    return hasil.toString() == rType.toString();
}
/**
 * strpad / startwith zero [0]
 * @param {number} val
 */
function strpad(val) {
    if (val >= 10) {
        return val;
    }
    else {
        return "0" + val;
    }
}
/**
 * is variable number?
 * @param n
 * @returns
 */
function isInt(n) {
    return Number(n) === n && n % 1 === 0;
}
/**
 * is variable float?
 * @param n
 * @returns
 */
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
if (typeof module.exports != 'undefined') {
    global.isInt = isInt;
    global.isFloat = isFloat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL051bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QkEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxJQUFJO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixPQUFPLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsTUFBTTtJQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO0lBQ3ZDLElBQUksQ0FBQyxNQUFNO1FBQUUsTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDakMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUN2QyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDM0QsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILFNBQVMsU0FBUyxDQUFDLENBQVMsRUFBRSxJQUFZO0lBQ3hDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1FBQ3pDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLE1BQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDdEQsd0RBQXdEO0lBRXhELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxNQUFNLENBQUMsR0FBVztJQUN6QixJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUU7UUFDYixPQUFPLEdBQUcsQ0FBQztLQUNaO1NBQU07UUFDTCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FDbEI7QUFDSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsS0FBSyxDQUFDLENBQUM7SUFDZCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLElBQUksV0FBVyxFQUFFO0lBQ3hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0NBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmRlY2xhcmUgaW50ZXJmYWNlIE51bWJlciB7XG4gIGdldE1TKHR5cGU6IHN0cmluZyk6IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IFggSG91ciBmcm9tIGRhdGVcbiAgICogQHJldHVybiBudW1iZXIgbXMgZnJvbSBEYXRlKCkuZ2V0VGltZSgpXG4gICAqIEBleGFtcGxlXG4gICAqIGdldCBgMSBob3VyIGZyb20gY3VycmVudCBEYXRlKClgXG4gICAqIDEuYWRkSG91cigpXG4gICAqIGdldCBgMSBob3VyIGZyb20gc3Blc2lmaWMgRGF0ZSgpYFxuICAgKiAxLmFkZEhvdXIobmV3IERhdGUoJzIwMjAtMDYtMDQgMDE6MTA6NTMnKSlcbiAgICovXG4gIGFkZEhvdXIoc291cmNlOiBEYXRlIHwgbnVsbCk6IG51bWJlcjtcblxuICAvKipcbiAgICogYWRkIHplcm8gbGVhZGluZ1xuICAgKiBAcGFyYW0gYWRkXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICovXG4gIEFkZFplcm8oYWRkOiBudW1iZXIsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyO1xufVxuXG5OdW1iZXIucHJvdG90eXBlLmdldE1TID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzICogNjAgKiAxMDAwO1xufTtcblxuTnVtYmVyLnByb3RvdHlwZS5hZGRIb3VyID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgY29uc3QgSG91ciA9IHRoaXMgKiA2MCAqIDEwMDA7IC8qIG1zICovXG4gIGlmICghc291cmNlKSBzb3VyY2UgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gbmV3IERhdGUoc291cmNlLmdldFRpbWUoKSArIEhvdXIpLmdldFRpbWUoKTtcbn07XG5cbk51bWJlci5wcm90b3R5cGUuQWRkWmVybyA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gIGNvbnN0IGwgPSBTdHJpbmcoYiB8fCAxMCkubGVuZ3RoIC0gU3RyaW5nKHRoaXMpLmxlbmd0aCArIDE7XG4gIHJldHVybiBsID4gMCA/IG5ldyBBcnJheShsKS5qb2luKGMgfHwgXCIwXCIpICsgdGhpcyA6IHRoaXM7XG59O1xuXG4vKipcbiAqIE9kZCBvciBFdmVuIChHYW5qaWwgR2VuYXApO1xuICogQHBhcmFtIG5cbiAqIEBwYXJhbSB0eXBlIG9kZCBvciBldmVuXG4gKi9cbmZ1bmN0aW9uIG9kZG9yZXZlbihuOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xuICBpZiAoIXR5cGUpIHtcbiAgICB0eXBlID0gXCJvZGRcIjtcbiAgfVxuICBjb25zdCB0aW1lID0gIW4gPyBuZXcgRGF0ZSgpLmdldERheSgpIDogTnVtYmVyKG4pO1xuXG4gIGlmICghL14tP1xcZCtqUXVlcnkvLnRlc3QodGltZS50b1N0cmluZygpKSkge1xuICAgIGFsZXJ0KFwiYXJndW1lbnRzIGlzIG5vdCBudW1iZXIsIHBsZWFzZSByZW1vdmUgcXVvdGVcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBoYXNpbCA9IHRpbWUgJSAyO1xuXG4gIGNvbnN0IHJUeXBlID0gL14ob2RkfGdhbmppbCkkLy50ZXN0KHR5cGUpID8gXCIxXCIgOiBcIjBcIjtcbiAgLy9yZXR1cm4gaGFzaWwgPT0gKHR5cGUgPT0gKCdvZGQnIHx8ICdnYW5qaWwnKSA/IDEgOiAwKTtcblxuICByZXR1cm4gaGFzaWwudG9TdHJpbmcoKSA9PSByVHlwZS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIHN0cnBhZCAvIHN0YXJ0d2l0aCB6ZXJvIFswXVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbFxuICovXG5mdW5jdGlvbiBzdHJwYWQodmFsOiBudW1iZXIpIHtcbiAgaWYgKHZhbCA+PSAxMCkge1xuICAgIHJldHVybiB2YWw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiMFwiICsgdmFsO1xuICB9XG59XG5cbi8qKlxuICogaXMgdmFyaWFibGUgbnVtYmVyP1xuICogQHBhcmFtIG5cbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGlzSW50KG4pIHtcbiAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSA9PT0gMDtcbn1cblxuLyoqXG4gKiBpcyB2YXJpYWJsZSBmbG9hdD9cbiAqIEBwYXJhbSBuXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBpc0Zsb2F0KG4pIHtcbiAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSAhPT0gMDtcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuaXNJbnQgPSBpc0ludFxuICBnbG9iYWwuaXNGbG9hdCA9IGlzRmxvYXRcbn0iXX0=
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-prototype-builtins */
/* eslint-disable @typescript-eslint/triple-slash-reference */
const __global = (typeof window != 'undefined' ? window : global) /* node */;
Object.size = function (obj) {
    let size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key))
            size++;
    }
    return size;
};
Object.child = function (str, callback) {
    const self = this;
    if (self.hasOwnProperty(str)) {
        if (typeof callback == 'function') {
            return callback(self[str]);
        }
        else {
            return true;
        }
    }
    else {
        return undefined;
    }
};
Object.alt = function (str, alternative) {
    const self = this;
    if (self.hasOwnProperty(str)) {
        return self[str];
    }
    else {
        return alternative;
    }
};
Object.has = function (str) {
    return this.hasOwnProperty(str);
};
Object.each = function (callback) {
    for (const key in this) {
        //callback.call(scope, key, this[key]);
        callback.call(this[key]);
    }
};
Object.isEmpty = function () {
    return this.length === 0;
};
Object.replaceKeyFrom = function (anotherObj) {
    return Object.entries(this).reduce((op, [key, value]) => {
        const newKey = anotherObj[key];
        op[newKey || key] = value;
        return op;
    }, {});
    /*if (typeof anotherObj == 'object') {
      for (const key in anotherObj) {
        if (Object.prototype.hasOwnProperty.call(anotherObj, key)) {
          const element = anotherObj[key];
          def[key] = element;
        }
      }
    }*/
};
Object.prototype.merge = function (...others) {
    return mergeDeep(this, ...others);
};
/**
 * Join object to separated string
 * * [].join() equivalent
 * @param obj Object
 * @param separator default comma(,)
 * @returns Joined string
 */
function object_join(obj, separator = ',') {
    return Object.keys(obj)
        .map(function (k) {
        return obj[k];
    })
        .join(separator);
}
__global.object_join = object_join;
/**
 * Simple object check.
 * @param item
 * @returns
 */
function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
}
__global.isObject = isObject;
/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 */
function mergeDeep(target, ...sources) {
    if (!sources.length)
        return target;
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key])
                    Object.assign(target, { [key]: {} });
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(target, ...sources);
}
__global.mergeDeep = mergeDeep;
//# sourceMappingURL=data:application/json;base64,
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/triple-slash-reference */

String.prototype.printf = function (obj) {
    /*const isNode = new Function(
      "try {return this===global;}catch(e){return false;}"
    );
  
    if (isNode()) {
      const util = require("util");
      return util.format(this, obj);
    }*/
    let useArguments = false;
    const _arguments = arguments;
    let i = -1;
    if (typeof _arguments[0] == 'string') {
        useArguments = true;
    }
    if (obj instanceof Array || useArguments) {
        return this.replace(/%s/g, function (a, b) {
            i++;
            if (useArguments) {
                if (typeof _arguments[i] == 'string') {
                    return _arguments[i];
                }
                else {
                    throw new Error('Arguments element is an invalid type');
                }
            }
            return obj[i];
        });
    }
    else {
        return this.replace(/{([^{}]*)}/g, function (a, b) {
            const r = obj[b];
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        });
    }
};
String.prototype.parse_url = function () {
    let parser;
    if (typeof module != 'undefined' && module.exports) {
        parser = new URL(this);
    }
    else if (typeof document != 'undefined') {
        parser = document.createElement('a');
    }
    const searchObject = [];
    let split = [];
    let queries = [];
    // Let the browser do the work
    parser.href = this.toString();
    // Convert query string to object
    queries = parser.search.replace(/^\?/, '').split('&');
    for (let i = 0; i < queries.length; i++) {
        split = queries[i].split('=');
        if (split.length)
            searchObject[split[0]] = split[1];
    }
    return {
        protocol: parser.protocol,
        host: parser.host,
        hostname: parser.hostname,
        port: parser.port,
        pathname: parser.pathname,
        search: parser.search,
        searchObject: searchObject,
        hash: parser.hash,
        protohost: parser.protocol + '//' + parser.host,
    };
};
/**
 * Load css
 */
String.prototype.CSS = function () {
    const e = document.createElement('link');
    e.rel = 'stylesheet';
    e.href = this.toString();
    const n = document.getElementsByTagName('head')[0];
    window.addEventListener
        ? window.addEventListener('load', function () {
            n.parentNode.insertBefore(e, n);
        }, !1)
        : window.attachEvent
            ? window.attachEvent('onload', function () {
                n.parentNode.insertBefore(e, n);
            })
            : (window.onload = function () {
                n.parentNode.insertBefore(e, n);
            });
};
String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/gm, '');
};
String.prototype.hexE = function () {
    let hex, i;
    let result = '';
    for (i = 0; i < this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ('000' + hex).slice(-4);
    }
    return result;
};
String.prototype.hexD = function () {
    let j;
    const hexes = this.match(/.{1,4}/g) || [];
    let back = '';
    for (j = 0; j < hexes.length; j++) {
        back += String.fromCharCode(parseInt(hexes[j], 16));
    }
    return back;
};
String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
String.prototype.rot13 = function () {
    return this.replace(/[a-zA-Z]/g, function (c) {
        return String.fromCharCode((c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
    });
};
String.prototype.truncate = function (n, useWordBoundary) {
    if (this.length <= n) {
        return this;
    }
    const subString = this.substr(0, n - 1); // the original check
    return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(' ')) : subString) + '&hellip;';
};
String.prototype.isEmpty = function () {
    if (this != null || typeof this != 'undefined') {
        return this.length === 0 || !this.trim();
    }
    return false;
};
String.prototype.replaceArr = function (array, replacement) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    let ori = this;
    array.map((str) => {
        ori = ori.replace(str, replacement);
    });
    return ori;
};
String.prototype.toHtmlEntities = function () {
    return this.replace(/./gm, function (s) {
        // return "&#" + s.charCodeAt(0) + ";";
        return s.match(/[a-z0-9\s]+/i) ? s : '&#' + s.charCodeAt(0) + ';';
    });
};
String.fromHtmlEntities = function (str) {
    return (str + '').replace(/&#\d+;/gm, function (s) {
        const m = s.match(/\d+/gm)[0];
        return String.fromCharCode(m);
    });
};
String.prototype.includesArray = function (substrings) {
    return substrings.some((v) => this.includes(v));
};
if (typeof ''.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        const find = typeof search == 'string' ? new RegExp(search, 'g') : search;
        return this.replace(find, replacement);
    };
}
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,
