if (typeof module.exports != 'undefined') {
    module.exports = null;
    module.exports = {
        any: null,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQW55LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0FueS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFZQSxJQUFJLE9BQU8sTUFBTSxDQUFDLE9BQU8sSUFBSSxXQUFXLEVBQUU7SUFDeEMsTUFBTSxDQUFDLE9BQU8sR0FBRyxJQUFhLENBQUM7SUFDL0IsTUFBTSxDQUFDLE9BQU8sR0FBRztRQUNmLEdBQUcsRUFBRSxJQUFhO0tBQ25CLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgYW55T2YgPSBCdWZmZXIgJlxuICBzdHJpbmcgJlxuICBvYmplY3QgJlxuICBzeW1ib2wgJlxuICBudWxsICZcbiAgdW5kZWZpbmVkICZcbiAgUmVjb3JkPHN0cmluZywgYW55PiAmXG4gICgoKSA9PiBhbnkpICZcbiAgYm9vbGVhbiAmXG4gIGJvb2xlYW5bXSAmXG4gIGtleW9mIFtmYWxzZV07XG5cbmlmICh0eXBlb2YgbW9kdWxlLmV4cG9ydHMgIT0gJ3VuZGVmaW5lZCcpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBudWxsIGFzIGFueU9mO1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBhbnk6IG51bGwgYXMgYW55T2YsXG4gIH07XG59XG4iXX0=
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-this-alias */
/* eslint-disable @typescript-eslint/triple-slash-reference */
/* eslint-disable prefer-rest-params */
/* eslint-disable no-prototype-builtins */

const _global = (typeof window != 'undefined' ? window : global) /* node */;
Array.prototype.shuffle = function () {
    let i = this.length, j, temp;
    if (i == 0)
        return this;
    while (--i) {
        j = Math.floor(Math.random() * (i + 1));
        temp = this[i];
        this[i] = this[j];
        this[j] = temp;
    }
    return this;
};
Array.prototype.last = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[this.length - 1];
    }
    else {
        let start = this.length - n;
        if (start < 0)
            start = 0;
        return this.slice(start, this.length);
    }
};
Array.prototype.trim = function () {
    return this.map((str) => {
        if (typeof str == 'string')
            return str.trim();
    });
};
Array.prototype.isEmpty = function () {
    return this.length === 0;
};
Array.prototype.range = function (start, end) {
    if (end < start) {
        return [];
    }
    return this.slice(start, end + 1);
};
Array.prototype.add = function (element) {
    this.push(element);
    return this;
};
Array.prototype.addAll = function (...otherArrays) {
    const self = this;
    otherArrays.forEach(function (array) {
        array.forEach((item) => {
            self.push(item);
        });
    });
    return self;
};
Array.prototype.random = function () {
    return this[Math.floor(Math.random() * this.length)];
};
Array.prototype.unique = function () {
    const a = this.concat();
    for (let i = 0; i < a.length; ++i) {
        for (let j = i + 1; j < a.length; ++j) {
            if (a[i] === a[j])
                a.splice(j--, 1);
        }
    }
    return a;
};
Array.prototype.uniqueStringArray = function () {
    const filter = new Map(this.map((s) => [s.toLowerCase(), s]));
    return [...filter.values()];
};
Array.prototype.uniqueObjectKey = function (key, removeNull = true) {
    if (!key)
        return this;
    const resArr = [];
    this.filter(function (item) {
        const i = resArr.findIndex((x) => x[key] == item[key]);
        if (i <= -1) {
            if (removeNull) {
                if (item[key])
                    resArr.push(item);
            }
            else {
                resArr.push(item);
            }
        }
        return null;
    });
    return resArr;
};
Array.prototype.contains = function (obj) {
    let i = this.length;
    while (i--) {
        if (this[i] === obj) {
            return true;
        }
    }
    return false;
};
Array.prototype.hasIndex = function (n) {
    return typeof this[n] != 'undefined';
};
Array.prototype.first = function (n) {
    if (!n) {
        if (this.length === 0)
            return undefined;
        return this[0];
    }
    else {
        if (this.length === 0)
            return [];
        return this.slice(0, n);
    }
};
Array.prototype.compact = function () {
    //var changes = false;
    for (let i = 0; i < this.length; i++) {
        // If element is non-existent, undefined or null, remove it.
        if (!this[i]) {
            this.splice(i, 1);
            i = i - 1;
            //changes = true;
        }
    }
    //if (!changes) return undefined;
    return this;
};
Array.prototype.deleteAt = function (index) {
    if (index < 0)
        index = this.length + index;
    // If element is non-existent, return undefined:
    if (!this.hasOwnProperty(index))
        return undefined;
    const elem = this[index];
    this.splice(index, 1);
    return elem;
};
Array.prototype.unset = function (value) {
    if (this.indexOf(value) != -1) {
        // Make sure the value exists
        this.splice(this.indexOf(value), 1);
    }
    return this;
};
Array.prototype.exists = function (n) {
    return typeof this[n] !== 'undefined';
};
if (!Array.prototype.hasOwnProperty('every')) {
    Array.prototype.every = function (fun /*, thisp */) {
        'use strict';
        const t = Object(this);
        const len = t.length >>> 0;
        let i;
        const thisp = arguments[1];
        if (this == null) {
            throw new TypeError();
        }
        if (typeof fun !== 'function') {
            throw new TypeError();
        }
        for (i = 0; i < len; i++) {
            if (i in t && !fun.call(thisp, t[i], i, t)) {
                return false;
            }
        }
        return true;
    };
}
Array.prototype.move = function (from, to) {
    const itemRemoved = this.splice(from, 1); // splice() returns the remove element as an array
    this.splice(to, 0, itemRemoved[0]); // Insert itemRemoved into the target index
    return this;
};
Array.prototype.hapusItemDariArrayLain = function (...arrayLain) {
    let thisArr = this;
    arrayLain.forEach((otherArr) => {
        thisArr = thisArr.filter(function (el) {
            return !otherArr.includes(el);
        });
    });
    return thisArr;
};
Array.prototype.removeEmpties = function () {
    const filter = this.filter(function (el) {
        const notnull = 
        // make sure element is not null
        el != null &&
            // make sure element is not undefined
            typeof el != 'undefined';
        // if element is string, make sure string length not zero
        if (typeof el == 'string') {
            return notnull && el.trim().length > 0;
        }
        return notnull;
    });
    return filter;
};
/**
 * split array to chunks
 * @param sourceArray
 * @param chunkSize
 * @see {@link https://stackoverflow.com/a/71483760/6404439}
 * @returns
 * @example
let ar1 = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20
];
// split array by 4
console.log("Split in chunks with 4 size", splitChunks(ar1, 4)); // [[1,2,3,4], [5,6,7,8]...]
 */
function array_split_chunks(sourceArray, chunkSize) {
    if (chunkSize <= 0)
        throw 'chunkSize must be greater than 0';
    const result = [];
    for (let i = 0; i < sourceArray.length; i += chunkSize) {
        result[i / chunkSize] = sourceArray.slice(i, i + chunkSize);
    }
    return result;
}
_global.array_split_chunks = array_split_chunks;
Array.prototype.split_chunks = function (size) {
    return array_split_chunks(this, size);
};
function array_filter(array) {
    return array.filter(function (el) {
        return el != null;
    });
}
_global.array_filter = array_filter;
/**
 * pick random from array
 * @param {Array<any>} arrays
 * @param {boolean} unique Unique the arrays
 */
function array_rand(arrays, unique) {
    if (unique) {
        arrays = array_unique(arrays);
    }
    const index = Math.floor(Math.random() * arrays.length);
    return {
        index: index,
        value: arrays[index],
    };
}
_global.array_rand = array_rand;
/**
 * Array unique
 * @param {Array<any>} arrays
 */
function array_unique(arrays) {
    return arrays.filter(function (item, pos, self) {
        return self.indexOf(item) == pos;
    });
}
_global.array_unique = array_unique;
/**
 * Unset array
 * @param {Array<any>} arrayName
 * @param {String|number} key
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function array_unset(arrayName, key) {
    let x;
    const tmpArray = [];
    for (x in arrayName) {
        if (x != key) {
            tmpArray[x] = arrayName[x];
        }
    }
    return tmpArray;
}
_global.array_unset = array_unset;
/**
 * PHP shuffle array equivalent
 * @param array
 * @example
 * var arr = [2, 11, 37, 42];
 * shuffle(arr);
 * console.log(arr); //return random
 */
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function shuffle(array) {
    let currentIndex = array.length, temporaryValue, randomIndex;
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;
        // And swap it with the current element.
        temporaryValue = array[currentIndex];
        array[currentIndex] = array[randomIndex];
        array[randomIndex] = temporaryValue;
    }
    return array;
}
_global.shuffle = shuffle;
function arrayCompare(a1, a2) {
    if (a1.length != a2.length)
        return false;
    const length = a2.length;
    for (let i = 0; i < length; i++) {
        if (a1[i] !== a2[i])
            return false;
    }
    return true;
}
_global.arrayCompare = arrayCompare;
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function inArray(needle, haystack) {
    const length = haystack.length;
    for (let i = 0; i < length; i++) {
        if (typeof haystack[i] == 'object') {
            if (arrayCompare(haystack[i], needle))
                return true;
        }
        else {
            if (haystack[i] == needle)
                return true;
        }
    }
    return false;
}
/**
 * in_array PHP equivalent
 * @param needle string etc
 * @param haystack
 */
function in_array(needle, haystack) {
    return inArray(needle, haystack);
}
_global.in_array = in_array;
/**
 * get all keys
 * @param haystack string etc
 */
function array_keys(haystack) {
    return Object.keys(haystack);
}
/**
 * Shuffles array in place.
 * @param a items An array containing the items.
 */
function array_shuffle(a) {
    let j, x, i;
    for (i = a.length - 1; i > 0; i--) {
        j = Math.floor(Math.random() * (i + 1));
        x = a[i];
        a[i] = a[j];
        a[j] = x;
    }
    return a;
}
_global.array_shuffle = array_shuffle;
/**
 * Deep merge two or more objects into the first.
 * (c) 2021 Chris Ferdinandi, MIT License, https://gomakethings.com
 * @param objects  The objects to merge together
 * @returns Merged values of defaults and options
 */
function deepAssign(...objects) {
    // Make sure there are objects to merge
    const len = objects.length;
    if (len < 1)
        return;
    if (len < 2)
        return objects[0];
    // Merge all objects into first
    for (let i = 1; i < len; i++) {
        for (const key in objects[i]) {
            if (objects[i].hasOwnProperty(key)) {
                // If it's an object, recursively merge
                // Otherwise, push to key
                if (Object.prototype.toString.call(objects[i][key]) === '[object Object]') {
                    objects[0][key] = deepAssign(objects[0][key] || {}, objects[i][key]);
                }
                else {
                    objects[0][key] = objects[i][key];
                }
            }
        }
    }
    return arguments[0];
}
_global.deepAssign = deepAssign;
/**
 * Remove item from array
 * @param arr
 * @param value
 * @returns
 */
function removeItem(arr, value) {
    const index = arr.indexOf(value);
    if (index > -1) {
        arr.splice(index, 1);
    }
    return arr;
}
_global.removeItem = removeItem;
//# sourceMappingURL=data:application/json;base64,
/* eslint-disable @typescript-eslint/no-unused-vars */
/**
 * Get all method from class
 * @param toCheck
 * @returns
 */
const getAllMethods = function (toCheck) {
    if (!toCheck)
        return [];
    try {
        const props = [];
        let obj = toCheck;
        do {
            props.push(...Object.getOwnPropertyNames(obj));
        } while ((obj = Object.getPrototypeOf(obj)));
        return props
            .sort()
            .filter((e, i, arr_fname) => {
            const c = toCheck[e];
            const fname = arr_fname[i + 1];
            if (e != fname && typeof c == 'function')
                return true;
        })
            .filter((fname) => {
            return ![
                '__defineGetter__',
                '__defineSetter__',
                '__lookupGetter__',
                '__lookupSetter__',
                'constructor',
                'hasOwnProperty',
                'isPrototypeOf',
                'propertyIsEnumerable',
                'toLocaleString',
                'toString',
                'valueOf',
            ].includes(fname);
        });
    }
    catch (e) {
        return Object.getOwnPropertyNames(toCheck).filter((prop) => typeof toCheck[prop] === 'function');
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xhc3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvQ2xhc3MudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3REOzs7O0dBSUc7QUFDSCxNQUFNLGFBQWEsR0FBRyxVQUFVLE9BQStCO0lBQzdELElBQUksQ0FBQyxPQUFPO1FBQUUsT0FBTyxFQUFFLENBQUM7SUFDeEIsSUFBSTtRQUNGLE1BQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUM7UUFDbEIsR0FBRztZQUNELEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRCxRQUFRLENBQUMsR0FBRyxHQUFHLE1BQU0sQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUM3QyxPQUFPLEtBQUs7YUFDVCxJQUFJLEVBQUU7YUFDTixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxFQUFFO1lBQzFCLE1BQU0sQ0FBQyxHQUFtQixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDckMsTUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsSUFBSSxLQUFLLElBQUksT0FBTyxDQUFDLElBQUksVUFBVTtnQkFBRSxPQUFPLElBQUksQ0FBQztRQUN4RCxDQUFDLENBQUM7YUFDRCxNQUFNLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBRTtZQUNoQixPQUFPLENBQUM7Z0JBQ04sa0JBQWtCO2dCQUNsQixrQkFBa0I7Z0JBQ2xCLGtCQUFrQjtnQkFDbEIsa0JBQWtCO2dCQUNsQixhQUFhO2dCQUNiLGdCQUFnQjtnQkFDaEIsZUFBZTtnQkFDZixzQkFBc0I7Z0JBQ3RCLGdCQUFnQjtnQkFDaEIsVUFBVTtnQkFDVixTQUFTO2FBQ1YsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7S0FDTjtJQUFDLE9BQU8sQ0FBQyxFQUFFO1FBQ1YsT0FBTyxNQUFNLENBQUMsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQztLQUNsRztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyoqXG4gKiBHZXQgYWxsIG1ldGhvZCBmcm9tIGNsYXNzXG4gKiBAcGFyYW0gdG9DaGVja1xuICogQHJldHVybnNcbiAqL1xuY29uc3QgZ2V0QWxsTWV0aG9kcyA9IGZ1bmN0aW9uICh0b0NoZWNrOiB7IFtrZXk6IHN0cmluZ106IGFueSB9KSB7XG4gIGlmICghdG9DaGVjaykgcmV0dXJuIFtdO1xuICB0cnkge1xuICAgIGNvbnN0IHByb3BzID0gW107XG4gICAgbGV0IG9iaiA9IHRvQ2hlY2s7XG4gICAgZG8ge1xuICAgICAgcHJvcHMucHVzaCguLi5PYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopKTtcbiAgICB9IHdoaWxlICgob2JqID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikpKTtcbiAgICByZXR1cm4gcHJvcHNcbiAgICAgIC5zb3J0KClcbiAgICAgIC5maWx0ZXIoKGUsIGksIGFycl9mbmFtZSkgPT4ge1xuICAgICAgICBjb25zdCBjOiBDbGFzc0RlY29yYXRvciA9IHRvQ2hlY2tbZV07XG4gICAgICAgIGNvbnN0IGZuYW1lID0gYXJyX2ZuYW1lW2kgKyAxXTtcbiAgICAgICAgaWYgKGUgIT0gZm5hbWUgJiYgdHlwZW9mIGMgPT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHRydWU7XG4gICAgICB9KVxuICAgICAgLmZpbHRlcigoZm5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuICFbXG4gICAgICAgICAgJ19fZGVmaW5lR2V0dGVyX18nLFxuICAgICAgICAgICdfX2RlZmluZVNldHRlcl9fJyxcbiAgICAgICAgICAnX19sb29rdXBHZXR0ZXJfXycsXG4gICAgICAgICAgJ19fbG9va3VwU2V0dGVyX18nLFxuICAgICAgICAgICdjb25zdHJ1Y3RvcicsXG4gICAgICAgICAgJ2hhc093blByb3BlcnR5JyxcbiAgICAgICAgICAnaXNQcm90b3R5cGVPZicsXG4gICAgICAgICAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgICAgICAgICAndG9Mb2NhbGVTdHJpbmcnLFxuICAgICAgICAgICd0b1N0cmluZycsXG4gICAgICAgICAgJ3ZhbHVlT2YnLFxuICAgICAgICBdLmluY2x1ZGVzKGZuYW1lKTtcbiAgICAgIH0pO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRvQ2hlY2spLmZpbHRlcigocHJvcCkgPT4gdHlwZW9mIHRvQ2hlY2tbcHJvcF0gPT09ICdmdW5jdGlvbicpO1xuICB9XG59O1xuIl19
Date.prototype.isHourAgo = function (hour) {
    hour = hour * 60 * 1000; /* ms */
    const hourago = Date.now() - hour;
    return hour > hourago;
};
if (!Date.now) {
    Date.now = function now() {
        return new Date().getTime();
    };
}
Date.prototype.addHours = function (h) {
    this.setTime(this.getTime() + h * 60 * 60 * 1000);
    //this.setHours(this.getHours()+h);
    return this;
};
Date.prototype.addHours2 = function (hrs) {
    this.setHours(this.getHours() + hrs);
    return this;
};
class date_ext {
    static datetime_local(date) {
        return new Date(date).toJSON().slice(0, 19);
    }
}
if (typeof window != 'undefined' && window instanceof Window) {
    window.datetime_local = date_ext.datetime_local;
}
else if (typeof global == 'object') {
    global.datetime_local = date_ext.datetime_local;
}
if (typeof module != 'undefined' && typeof module == 'object') {
    module.exports = date_ext;
    module.exports = {
        datetime_local: date_ext.datetime_local,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGF0ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWNBLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsSUFBSTtJQUN2QyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO0lBQ2pDLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUM7SUFDbEMsT0FBTyxJQUFJLEdBQUcsT0FBTyxDQUFDO0FBQ3hCLENBQUMsQ0FBQztBQUVGLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFO0lBQ2IsSUFBSSxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUc7UUFDckIsT0FBTyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQzlCLENBQUMsQ0FBQztDQUNIO0FBQ0QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO0lBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ2xELG1DQUFtQztJQUNuQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsR0FBRztJQUN0QyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUNyQyxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQztBQUVGLE1BQU0sUUFBUTtJQUNaLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBNEI7UUFDaEQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Q0FDRjtBQUVELElBQUksT0FBTyxNQUFNLElBQUksV0FBVyxJQUFJLE1BQU0sWUFBWSxNQUFNLEVBQUU7SUFDNUQsTUFBTSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO0NBQ2pEO0tBQU0sSUFBSSxPQUFPLE1BQU0sSUFBSSxRQUFRLEVBQUU7SUFDcEMsTUFBTSxDQUFDLGNBQWMsR0FBRyxRQUFRLENBQUMsY0FBYyxDQUFDO0NBQ2pEO0FBQ0QsSUFBSSxPQUFPLE1BQU0sSUFBSSxXQUFXLElBQUksT0FBTyxNQUFNLElBQUksUUFBUSxFQUFFO0lBQzdELE1BQU0sQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO0lBQzFCLE1BQU0sQ0FBQyxPQUFPLEdBQUc7UUFDZixjQUFjLEVBQUUsUUFBUSxDQUFDLGNBQWM7S0FDeEMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbnRlcmZhY2UgRGF0ZSB7XG4gIGFkZEhvdXJzOiAoaDogbnVtYmVyKSA9PiBEYXRlO1xuICBhZGRIb3VyczI6IChoOiBudW1iZXIpID0+IERhdGU7XG5cbiAgdG9HTVRTdHJpbmcoKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBEYXRlIGlzIGBuYCBob3VyIGFnb1xuICAgKiBAcGFyYW0gc291cmNlIG51bWJlciBvZiBob3Vyc1xuICAgKi9cbiAgaXNIb3VyQWdvKHNvdXJjZTogbnVtYmVyKTogYm9vbGVhbjtcbn1cblxuRGF0ZS5wcm90b3R5cGUuaXNIb3VyQWdvID0gZnVuY3Rpb24gKGhvdXIpIHtcbiAgaG91ciA9IGhvdXIgKiA2MCAqIDEwMDA7IC8qIG1zICovXG4gIGNvbnN0IGhvdXJhZ28gPSBEYXRlLm5vdygpIC0gaG91cjtcbiAgcmV0dXJuIGhvdXIgPiBob3VyYWdvO1xufTtcblxuaWYgKCFEYXRlLm5vdykge1xuICBEYXRlLm5vdyA9IGZ1bmN0aW9uIG5vdygpIHtcbiAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIH07XG59XG5EYXRlLnByb3RvdHlwZS5hZGRIb3VycyA9IGZ1bmN0aW9uIChoKSB7XG4gIHRoaXMuc2V0VGltZSh0aGlzLmdldFRpbWUoKSArIGggKiA2MCAqIDYwICogMTAwMCk7XG4gIC8vdGhpcy5zZXRIb3Vycyh0aGlzLmdldEhvdXJzKCkraCk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRGF0ZS5wcm90b3R5cGUuYWRkSG91cnMyID0gZnVuY3Rpb24gKGhycykge1xuICB0aGlzLnNldEhvdXJzKHRoaXMuZ2V0SG91cnMoKSArIGhycyk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuY2xhc3MgZGF0ZV9leHQge1xuICBzdGF0aWMgZGF0ZXRpbWVfbG9jYWwoZGF0ZTogc3RyaW5nIHwgbnVtYmVyIHwgRGF0ZSkge1xuICAgIHJldHVybiBuZXcgRGF0ZShkYXRlKS50b0pTT04oKS5zbGljZSgwLCAxOSk7XG4gIH1cbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93IGluc3RhbmNlb2YgV2luZG93KSB7XG4gIHdpbmRvdy5kYXRldGltZV9sb2NhbCA9IGRhdGVfZXh0LmRhdGV0aW1lX2xvY2FsO1xufSBlbHNlIGlmICh0eXBlb2YgZ2xvYmFsID09ICdvYmplY3QnKSB7XG4gIGdsb2JhbC5kYXRldGltZV9sb2NhbCA9IGRhdGVfZXh0LmRhdGV0aW1lX2xvY2FsO1xufVxuaWYgKHR5cGVvZiBtb2R1bGUgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0Jykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGRhdGVfZXh0O1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBkYXRldGltZV9sb2NhbDogZGF0ZV9leHQuZGF0ZXRpbWVfbG9jYWwsXG4gIH07XG59XG4iXX0=
if (typeof document != 'undefined') {
    Document.prototype.listen = function (eventType, listener, options = {}) {
        if (this.addEventListener) {
            this.addEventListener(eventType, listener, options);
        }
        else if (this.attachEvent) {
            this.attachEvent('on' + eventType, listener, options);
        }
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRG9jdW1lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxPQUFPLFFBQVEsSUFBSSxXQUFXLEVBQUU7SUFDbEMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxNQUFNLEdBQUcsVUFDMUIsU0FBWSxFQUNaLFFBQTBELEVBQzFELE9BQU8sR0FBRyxFQUFFO1FBRVosSUFBZSxJQUFLLENBQUMsZ0JBQWdCLEVBQUU7WUFDMUIsSUFBSyxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7U0FDakU7YUFBTSxJQUFlLElBQUssQ0FBQyxXQUFXLEVBQUU7WUFDNUIsSUFBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLEdBQUcsU0FBUyxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUNuRTtJQUNILENBQUMsQ0FBQztDQUNIIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKHR5cGVvZiBkb2N1bWVudCAhPSAndW5kZWZpbmVkJykge1xuICBEb2N1bWVudC5wcm90b3R5cGUubGlzdGVuID0gZnVuY3Rpb24gPEsgZXh0ZW5kcyBrZXlvZiBEb2N1bWVudEV2ZW50TWFwPihcbiAgICBldmVudFR5cGU6IEssXG4gICAgbGlzdGVuZXI6ICh0aGlzOiBEb2N1bWVudCwgZXY6IERvY3VtZW50RXZlbnRNYXBbS10pID0+IGFueSxcbiAgICBvcHRpb25zID0ge31cbiAgKSB7XG4gICAgaWYgKCg8RG9jdW1lbnQ+dGhpcykuYWRkRXZlbnRMaXN0ZW5lcikge1xuICAgICAgKDxEb2N1bWVudD50aGlzKS5hZGRFdmVudExpc3RlbmVyKGV2ZW50VHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAoKDxEb2N1bWVudD50aGlzKS5hdHRhY2hFdmVudCkge1xuICAgICAgKDxEb2N1bWVudD50aGlzKS5hdHRhY2hFdmVudCgnb24nICsgZXZlbnRUeXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG4gICAgfVxuICB9O1xufVxuIl19
if (typeof window != 'undefined' && typeof document != 'undefined') {
    Element.prototype.insertAfter = function (el) {
        this.parentNode.insertBefore(el, this.nextSibling);
        return this;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRWxlbWVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9FbGVtZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU1BLElBQUksT0FBTyxNQUFNLElBQUksV0FBVyxJQUFJLE9BQU8sUUFBUSxJQUFJLFdBQVcsRUFBRTtJQUNsRSxPQUFPLENBQUMsU0FBUyxDQUFDLFdBQVcsR0FBRyxVQUE2QixFQUFFO1FBQzdELElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDbkQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuaW50ZXJmYWNlIEVsZW1lbnQge1xuICAvKiogQHNlZSB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzU5MzYwNzEwLzY0MDQ0Mzl9ICovXG4gIGluc2VydEFmdGVyOiAoZWw6IEhUTUxFbGVtZW50KSA9PiBIVE1MRWxlbWVudDtcbn1cblxuaWYgKHR5cGVvZiB3aW5kb3cgIT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9ICd1bmRlZmluZWQnKSB7XG4gIEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFmdGVyID0gZnVuY3Rpb24gKHRoaXM6IEhUTUxFbGVtZW50LCBlbCkge1xuICAgIHRoaXMucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZWwsIHRoaXMubmV4dFNpYmxpbmcpO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xufVxuIl19
if (!('toJSON' in Error.prototype)) {
    // https://stackoverflow.com/a/18391400/6404439
    Object.defineProperty(Error.prototype, 'toJSON', {
        value: function () {
            const alt = {};
            Object.getOwnPropertyNames(this).forEach(function (key) {
                alt[key] = this[key];
            }, this);
            return alt;
        },
        configurable: true,
        writable: true,
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSSxDQUFDLENBQUMsUUFBUSxJQUFJLEtBQUssQ0FBQyxTQUFTLENBQUMsRUFBRTtJQUNsQywrQ0FBK0M7SUFDL0MsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLFFBQVEsRUFBRTtRQUMvQyxLQUFLLEVBQUU7WUFDTCxNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFFZixNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLFVBQVUsR0FBRztnQkFDcEQsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFFVCxPQUFPLEdBQUcsQ0FBQztRQUNiLENBQUM7UUFDRCxZQUFZLEVBQUUsSUFBSTtRQUNsQixRQUFRLEVBQUUsSUFBSTtLQUNmLENBQUMsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKCEoJ3RvSlNPTicgaW4gRXJyb3IucHJvdG90eXBlKSkge1xuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTgzOTE0MDAvNjQwNDQzOVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRXJyb3IucHJvdG90eXBlLCAndG9KU09OJywge1xuICAgIHZhbHVlOiBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBhbHQgPSB7fTtcblxuICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIGFsdFtrZXldID0gdGhpc1trZXldO1xuICAgICAgfSwgdGhpcyk7XG5cbiAgICAgIHJldHVybiBhbHQ7XG4gICAgfSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IHRydWUsXG4gIH0pO1xufVxuIl19
"use strict";
/* eslint-disable @typescript-eslint/no-unused-vars */

Object.defineProperty(exports, "__esModule", { value: true });
Function.prototype.once = function (param) {
    if (!this.wasCalled) {
        this.apply(param);
        this.wasCalled = true;
    }
};
/**
 * Run the function only once
 * @param fn
 * @see {@link https://stackoverflow.com/a/41000535/6404439}
 * @returns
 */
function runOnce(fn) {
    let done = false;
    return function (...args) {
        if (!done) {
            done = true;
            return fn.apply(this, args);
        }
    };
}
if (typeof module.exports != 'undefined') {
    module.exports = {
        runOnce,
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRnVuY3Rpb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvRnVuY3Rpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHNEQUFzRDtBQUN0RCx1Q0FBdUM7O0FBMEJ2QyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksR0FBRyxVQUEwQixLQUFNO0lBQ3hELElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1FBQ25CLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7S0FDdkI7QUFDSCxDQUFDLENBQUM7QUFFRjs7Ozs7R0FLRztBQUNILFNBQVMsT0FBTyxDQUFDLEVBQVk7SUFDM0IsSUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDO0lBQ2pCLE9BQU8sVUFBVSxHQUFHLElBQVM7UUFDM0IsSUFBSSxDQUFDLElBQUksRUFBRTtZQUNULElBQUksR0FBRyxJQUFJLENBQUM7WUFDWixPQUFPLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQztBQUVELElBQUksT0FBTyxNQUFNLENBQUMsT0FBTyxJQUFJLFdBQVcsRUFBRTtJQUN4QyxNQUFNLENBQUMsT0FBTyxHQUFHO1FBQ2YsT0FBTztLQUNSLENBQUM7Q0FDSCIsInNvdXJjZXNDb250ZW50IjpbIi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLy8vIDxyZWZlcmVuY2UgcGF0aD1cIi4vZ2xvYmFscy5kLnRzXCIgLz5cblxuaW50ZXJmYWNlIENhbGxhYmxlIHtcbiAgKHRleHQ6IHN0cmluZyk6IHZvaWQ7XG4gIC8qKlxuICAgKiBpbmRpY2F0b3IgaWYgdGhpcyBmdW5jdGlvbiB3YXMgY2FsbGVkXG4gICAqL1xuICB3YXNDYWxsZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIENsYXNzIENhbGxhYmxlIERlY29yYXRvclxuICogQGV4YW1wbGVcbiAqIC8vIGRlZmluaXRpb24gZm9yIGJlbG93IGNsYXNzZXNcbiAqIC8vIGNhbiBiZSBjYWxsZWQgd2l0aCBgbmV3YFxuICogbmV3IHlvdXJjbGFzcygpO1xuICogbmV3IHlvdXJjbGFzcyhhcmcsIGFyZzEpO1xuICogLy8gY2FuIGJlIGNhbGxlZCBkaXJlY3RseSBsaWtlIGZ1bmN0aW9uXG4gKiB5b3VyY2xhc3MoKTtcbiAqIHlvdXJjbGFzcyhhcmcsIGFyZzEpO1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENsYXNzQ2FsbGFibGUgZXh0ZW5kcyBDYWxsYWJsZSB7XG4gIG5ldyAoLi4uYXJnczogYW55W10pOiBDbGFzc0RlY29yYXRvcjtcbiAgbmV3ICgpOiBDbGFzc0RlY29yYXRvcjtcbn1cblxuRnVuY3Rpb24ucHJvdG90eXBlLm9uY2UgPSBmdW5jdGlvbiAodGhpczogQ2FsbGFibGUsIHBhcmFtPykge1xuICBpZiAoIXRoaXMud2FzQ2FsbGVkKSB7XG4gICAgdGhpcy5hcHBseShwYXJhbSk7XG4gICAgdGhpcy53YXNDYWxsZWQgPSB0cnVlO1xuICB9XG59O1xuXG4vKipcbiAqIFJ1biB0aGUgZnVuY3Rpb24gb25seSBvbmNlXG4gKiBAcGFyYW0gZm5cbiAqIEBzZWUge0BsaW5rIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS80MTAwMDUzNS82NDA0NDM5fVxuICogQHJldHVybnNcbiAqL1xuZnVuY3Rpb24gcnVuT25jZShmbjogQ2FsbGFibGUpIHtcbiAgbGV0IGRvbmUgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICguLi5hcmdzOiBhbnkpIHtcbiAgICBpZiAoIWRvbmUpIHtcbiAgICAgIGRvbmUgPSB0cnVlO1xuICAgICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIH1cbiAgfTtcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPSAndW5kZWZpbmVkJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBydW5PbmNlLFxuICB9O1xufVxuIl19
JSON.stringifyWithCircularRefs = (function () {
    const refs = new Map();
    const parents = [];
    const path = ['this'];
    function clear() {
        refs.clear();
        parents.length = 0;
        path.length = 1;
    }
    function updateParents(key, value) {
        let idx = parents.length - 1;
        let prev = parents[idx];
        if (prev[key] === value || idx === 0) {
            path.push(key);
            parents.push(value);
        }
        else {
            while (idx-- >= 0) {
                prev = parents[idx];
                if (prev[key] === value) {
                    idx += 2;
                    parents.length = idx;
                    path.length = idx;
                    --idx;
                    parents[idx] = value;
                    path[idx] = key;
                    break;
                }
            }
        }
    }
    function checkCircular(key, value) {
        if (value != null) {
            if (typeof value === 'object') {
                if (key) {
                    updateParents(key, value);
                }
                const other = refs.get(value);
                if (other) {
                    return '[Circular Reference]' + other;
                }
                else {
                    refs.set(value, path.join('.'));
                }
            }
        }
        return value;
    }
    return function stringifyWithCircularRefs(obj, space = 2) {
        try {
            parents.push(obj);
            return JSON.stringify(obj, checkCircular, space);
        }
        finally {
            clear();
        }
    };
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSlNPTi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9KU09OLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVVBLElBQUksQ0FBQyx5QkFBeUIsR0FBRyxDQUFDO0lBQ2hDLE1BQU0sSUFBSSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7SUFDdkIsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDO0lBQ25CLE1BQU0sSUFBSSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7SUFFdEIsU0FBUyxLQUFLO1FBQ1osSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ2IsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7UUFDbkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbEIsQ0FBQztJQUVELFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLO1FBQy9CLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUN4QixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksR0FBRyxLQUFLLENBQUMsRUFBRTtZQUNwQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUNyQjthQUFNO1lBQ0wsT0FBTyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUU7Z0JBQ2pCLElBQUksR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEtBQUssRUFBRTtvQkFDdkIsR0FBRyxJQUFJLENBQUMsQ0FBQztvQkFDVCxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztvQkFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7b0JBQ2xCLEVBQUUsR0FBRyxDQUFDO29CQUNOLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUM7b0JBQ2hCLE1BQU07aUJBQ1A7YUFDRjtTQUNGO0lBQ0gsQ0FBQztJQUVELFNBQVMsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLO1FBQy9CLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNqQixJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtnQkFDN0IsSUFBSSxHQUFHLEVBQUU7b0JBQ1AsYUFBYSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztpQkFDM0I7Z0JBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDOUIsSUFBSSxLQUFLLEVBQUU7b0JBQ1QsT0FBTyxzQkFBc0IsR0FBRyxLQUFLLENBQUM7aUJBQ3ZDO3FCQUFNO29CQUNMLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztpQkFDakM7YUFDRjtTQUNGO1FBQ0QsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQsT0FBTyxTQUFTLHlCQUF5QixDQUFDLEdBQUcsRUFBRSxLQUFLLEdBQUcsQ0FBQztRQUN0RCxJQUFJO1lBQ0YsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNsQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLGFBQWEsRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNsRDtnQkFBUztZQUNSLEtBQUssRUFBRSxDQUFDO1NBQ1Q7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG5pbnRlcmZhY2UgSlNPTiB7XG4gIC8qKlxuICAgKiBAc2VlIHtAbGluayBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvNjE5NjI5NjQvNjQwNDQzOX1cbiAgICogQGV4YW1wbGVcbiAgICogY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkoe2E6e2E6e2E6e2E6W3thOntoZWxsbzpcIndvcmxkXCJ9fV19fX19KSlcbiAgICovXG4gIHN0cmluZ2lmeVdpdGhDaXJjdWxhclJlZnM6IChvYmo6IGFueSwgc3BhY2U/OiBudW1iZXIpID0+IHN0cmluZztcbn1cblxuSlNPTi5zdHJpbmdpZnlXaXRoQ2lyY3VsYXJSZWZzID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgcmVmcyA9IG5ldyBNYXAoKTtcbiAgY29uc3QgcGFyZW50cyA9IFtdO1xuICBjb25zdCBwYXRoID0gWyd0aGlzJ107XG5cbiAgZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgcmVmcy5jbGVhcigpO1xuICAgIHBhcmVudHMubGVuZ3RoID0gMDtcbiAgICBwYXRoLmxlbmd0aCA9IDE7XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVQYXJlbnRzKGtleSwgdmFsdWUpIHtcbiAgICBsZXQgaWR4ID0gcGFyZW50cy5sZW5ndGggLSAxO1xuICAgIGxldCBwcmV2ID0gcGFyZW50c1tpZHhdO1xuICAgIGlmIChwcmV2W2tleV0gPT09IHZhbHVlIHx8IGlkeCA9PT0gMCkge1xuICAgICAgcGF0aC5wdXNoKGtleSk7XG4gICAgICBwYXJlbnRzLnB1c2godmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aGlsZSAoaWR4LS0gPj0gMCkge1xuICAgICAgICBwcmV2ID0gcGFyZW50c1tpZHhdO1xuICAgICAgICBpZiAocHJldltrZXldID09PSB2YWx1ZSkge1xuICAgICAgICAgIGlkeCArPSAyO1xuICAgICAgICAgIHBhcmVudHMubGVuZ3RoID0gaWR4O1xuICAgICAgICAgIHBhdGgubGVuZ3RoID0gaWR4O1xuICAgICAgICAgIC0taWR4O1xuICAgICAgICAgIHBhcmVudHNbaWR4XSA9IHZhbHVlO1xuICAgICAgICAgIHBhdGhbaWR4XSA9IGtleTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrQ2lyY3VsYXIoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgdXBkYXRlUGFyZW50cyhrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG90aGVyID0gcmVmcy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAob3RoZXIpIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhciBSZWZlcmVuY2VdJyArIG90aGVyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlZnMuc2V0KHZhbHVlLCBwYXRoLmpvaW4oJy4nKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmluZ2lmeVdpdGhDaXJjdWxhclJlZnMob2JqLCBzcGFjZSA9IDIpIHtcbiAgICB0cnkge1xuICAgICAgcGFyZW50cy5wdXNoKG9iaik7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkob2JqLCBjaGVja0NpcmN1bGFyLCBzcGFjZSk7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGNsZWFyKCk7XG4gICAgfVxuICB9O1xufSkoKTtcbiJdfQ==
/* eslint-disable @typescript-eslint/no-unused-vars */
/*declare let Navigator: {
  prototype: Navigator;
  new (): Navigator;
};*/
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTmF2aWdhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL05hdmlnYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzREFBc0Q7QUFDdEQ7OztJQUdJIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG4vKmRlY2xhcmUgbGV0IE5hdmlnYXRvcjoge1xuICBwcm90b3R5cGU6IE5hdmlnYXRvcjtcbiAgbmV3ICgpOiBOYXZpZ2F0b3I7XG59OyovXG5cbmludGVyZmFjZSBOYXZpZ2F0b3JBdXRvbWF0aW9uSW5mb3JtYXRpb24ge1xuICByZWFkb25seSB3ZWJkcml2ZXI6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JCZWFjb24ge1xuICBzZW5kQmVhY29uKFxuICAgIHVybDogc3RyaW5nLFxuICAgIGRhdGE/OlxuICAgICAgfCBCbG9iXG4gICAgICB8IEludDhBcnJheVxuICAgICAgfCBJbnQxNkFycmF5XG4gICAgICB8IEludDMyQXJyYXlcbiAgICAgIHwgVWludDhBcnJheVxuICAgICAgfCBVaW50MTZBcnJheVxuICAgICAgfCBVaW50MzJBcnJheVxuICAgICAgfCBVaW50OENsYW1wZWRBcnJheVxuICAgICAgfCBGbG9hdDMyQXJyYXlcbiAgICAgIHwgRmxvYXQ2NEFycmF5XG4gICAgICB8IERhdGFWaWV3XG4gICAgICB8IEFycmF5QnVmZmVyXG4gICAgICB8IEZvcm1EYXRhXG4gICAgICB8IHN0cmluZ1xuICAgICAgfCBudWxsXG4gICk6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JDb25jdXJyZW50SGFyZHdhcmUge1xuICByZWFkb25seSBoYXJkd2FyZUNvbmN1cnJlbmN5OiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JDb250ZW50VXRpbHMge1xuICByZWdpc3RlclByb3RvY29sSGFuZGxlcihzY2hlbWU6IHN0cmluZywgdXJsOiBzdHJpbmcsIHRpdGxlOiBzdHJpbmcpOiB2b2lkO1xuXG4gIHVucmVnaXN0ZXJQcm90b2NvbEhhbmRsZXIoc2NoZW1lOiBzdHJpbmcsIHVybDogc3RyaW5nKTogdm9pZDtcbn1cblxuaW50ZXJmYWNlIE5hdmlnYXRvckNvb2tpZXMge1xuICByZWFkb25seSBjb29raWVFbmFibGVkOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgTmF2aWdhdG9ySUQge1xuICByZWFkb25seSBhcHBDb2RlTmFtZTogc3RyaW5nO1xuICByZWFkb25seSBhcHBOYW1lOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFwcFZlcnNpb246IHN0cmluZztcbiAgcmVhZG9ubHkgb3NjcHU6IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBwbGF0Zm9ybSBuYW1lXG4gICAqL1xuICByZWFkb25seSBwbGF0Zm9ybTogc3RyaW5nO1xuICByZWFkb25seSBwcm9kdWN0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHByb2R1Y3RTdWI6IHN0cmluZztcbiAgLyoqXG4gICAqIEdldCBicm93c2VyIHVzZXJhZ2VudFxuICAgKi9cbiAgcmVhZG9ubHkgdXNlckFnZW50OiBzdHJpbmc7XG4gIC8qKlxuICAgKiBHZXQgYnJvd3NlciB2ZW5kb3JcbiAgICovXG4gIHJlYWRvbmx5IHZlbmRvcjogc3RyaW5nO1xuICByZWFkb25seSB2ZW5kb3JTdWI6IHN0cmluZztcblxuICB0YWludEVuYWJsZWQoKTogYm9vbGVhbjtcbn1cblxuaW50ZXJmYWNlIE5hdmlnYXRvckxhbmd1YWdlIHtcbiAgcmVhZG9ubHkgbGFuZ3VhZ2U6IHN0cmluZztcbiAgcmVhZG9ubHkgbGFuZ3VhZ2VzOiBSZWFkb25seUFycmF5PHN0cmluZz47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JPbkxpbmUge1xuICByZWFkb25seSBvbkxpbmU6IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0b3JQbHVnaW5zIHtcbiAgcmVhZG9ubHkgbWltZVR5cGVzOiBNaW1lVHlwZUFycmF5O1xuICByZWFkb25seSBwbHVnaW5zOiBQbHVnaW5BcnJheTtcblxuICBqYXZhRW5hYmxlZCgpOiBib29sZWFuO1xufVxuXG5pbnRlcmZhY2UgTmF2aWdhdG9yU3RvcmFnZSB7XG4gIHJlYWRvbmx5IHN0b3JhZ2U6IFN0b3JhZ2VNYW5hZ2VyO1xufVxuIl19
Number.prototype.getMS = function (type) {
    const self = this;
    return this * 60 * 1000;
};
Number.prototype.addHour = function (source) {
    const self = this;
    const Hour = this * 60 * 1000; /* ms */
    if (!source)
        source = new Date();
    return new Date(source.getTime() + Hour).getTime();
};
Number.prototype.AddZero = function (b, c) {
    const l = String(b || 10).length - String(this).length + 1;
    return l > 0 ? new Array(l).join(c || "0") + this : this;
};
/**
 * Odd or Even (Ganjil Genap);
 * @param n
 * @param type odd or even
 */
function oddoreven(n, type) {
    if (!type) {
        type = "odd";
    }
    const time = !n ? new Date().getDay() : Number(n);
    if (!/^-?\d+jQuery/.test(time.toString())) {
        alert("arguments is not number, please remove quote");
        return null;
    }
    const hasil = time % 2;
    const rType = /^(odd|ganjil)$/.test(type) ? "1" : "0";
    //return hasil == (type == ('odd' || 'ganjil') ? 1 : 0);
    return hasil.toString() == rType.toString();
}
/**
 * strpad / startwith zero [0]
 * @param {number} val
 */
function strpad(val) {
    if (val >= 10) {
        return val;
    }
    else {
        return "0" + val;
    }
}
/**
 * is variable number?
 * @param n
 * @returns
 */
function isInt(n) {
    return Number(n) === n && n % 1 === 0;
}
/**
 * is variable float?
 * @param n
 * @returns
 */
function isFloat(n) {
    return Number(n) === n && n % 1 !== 0;
}
if (typeof module.exports != 'undefined') {
    global.isInt = isInt;
    global.isFloat = isFloat;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnVtYmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL051bWJlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1QkEsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLEdBQUcsVUFBVSxJQUFJO0lBQ3JDLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQztJQUNsQixPQUFPLElBQUksR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxHQUFHLFVBQVUsTUFBTTtJQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUM7SUFDbEIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQyxRQUFRO0lBQ3ZDLElBQUksQ0FBQyxNQUFNO1FBQUUsTUFBTSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7SUFDakMsT0FBTyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDckQsQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxDQUFDLEVBQUUsQ0FBQztJQUN2QyxNQUFNLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUMzRCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDM0QsQ0FBQyxDQUFDO0FBRUY7Ozs7R0FJRztBQUNILFNBQVMsU0FBUyxDQUFDLENBQVMsRUFBRSxJQUFZO0lBQ3hDLElBQUksQ0FBQyxJQUFJLEVBQUU7UUFDVCxJQUFJLEdBQUcsS0FBSyxDQUFDO0tBQ2Q7SUFDRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBRWxELElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFO1FBQ3pDLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUcsQ0FBQyxDQUFDO0lBRXZCLE1BQU0sS0FBSyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7SUFDdEQsd0RBQXdEO0lBRXhELE9BQU8sS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUM5QyxDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsU0FBUyxNQUFNLENBQUMsR0FBVztJQUN6QixJQUFJLEdBQUcsSUFBSSxFQUFFLEVBQUU7UUFDYixPQUFPLEdBQUcsQ0FBQztLQUNaO1NBQU07UUFDTCxPQUFPLEdBQUcsR0FBRyxHQUFHLENBQUM7S0FDbEI7QUFDSCxDQUFDO0FBRUQ7Ozs7R0FJRztBQUNILFNBQVMsS0FBSyxDQUFDLENBQUM7SUFDZCxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxTQUFTLE9BQU8sQ0FBQyxDQUFDO0lBQ2hCLE9BQU8sTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN4QyxDQUFDO0FBRUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxPQUFPLElBQUksV0FBVyxFQUFFO0lBQ3hDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFBO0lBQ3BCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFBO0NBQ3pCIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cbmRlY2xhcmUgaW50ZXJmYWNlIE51bWJlciB7XG4gIGdldE1TKHR5cGU6IHN0cmluZyk6IG51bWJlcjtcblxuICAvKipcbiAgICogR2V0IFggSG91ciBmcm9tIGRhdGVcbiAgICogQHJldHVybiBudW1iZXIgbXMgZnJvbSBEYXRlKCkuZ2V0VGltZSgpXG4gICAqIEBleGFtcGxlXG4gICAqIGdldCBgMSBob3VyIGZyb20gY3VycmVudCBEYXRlKClgXG4gICAqIDEuYWRkSG91cigpXG4gICAqIGdldCBgMSBob3VyIGZyb20gc3Blc2lmaWMgRGF0ZSgpYFxuICAgKiAxLmFkZEhvdXIobmV3IERhdGUoJzIwMjAtMDYtMDQgMDE6MTA6NTMnKSlcbiAgICovXG4gIGFkZEhvdXIoc291cmNlOiBEYXRlIHwgbnVsbCk6IG51bWJlcjtcblxuICAvKipcbiAgICogYWRkIHplcm8gbGVhZGluZ1xuICAgKiBAcGFyYW0gYWRkXG4gICAqIEBwYXJhbSB0YXJnZXRcbiAgICovXG4gIEFkZFplcm8oYWRkOiBudW1iZXIsIHRhcmdldDogc3RyaW5nKTogbnVtYmVyO1xufVxuXG5OdW1iZXIucHJvdG90eXBlLmdldE1TID0gZnVuY3Rpb24gKHR5cGUpIHtcbiAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gIHJldHVybiB0aGlzICogNjAgKiAxMDAwO1xufTtcblxuTnVtYmVyLnByb3RvdHlwZS5hZGRIb3VyID0gZnVuY3Rpb24gKHNvdXJjZSkge1xuICBjb25zdCBzZWxmID0gdGhpcztcbiAgY29uc3QgSG91ciA9IHRoaXMgKiA2MCAqIDEwMDA7IC8qIG1zICovXG4gIGlmICghc291cmNlKSBzb3VyY2UgPSBuZXcgRGF0ZSgpO1xuICByZXR1cm4gbmV3IERhdGUoc291cmNlLmdldFRpbWUoKSArIEhvdXIpLmdldFRpbWUoKTtcbn07XG5cbk51bWJlci5wcm90b3R5cGUuQWRkWmVybyA9IGZ1bmN0aW9uIChiLCBjKSB7XG4gIGNvbnN0IGwgPSBTdHJpbmcoYiB8fCAxMCkubGVuZ3RoIC0gU3RyaW5nKHRoaXMpLmxlbmd0aCArIDE7XG4gIHJldHVybiBsID4gMCA/IG5ldyBBcnJheShsKS5qb2luKGMgfHwgXCIwXCIpICsgdGhpcyA6IHRoaXM7XG59O1xuXG4vKipcbiAqIE9kZCBvciBFdmVuIChHYW5qaWwgR2VuYXApO1xuICogQHBhcmFtIG5cbiAqIEBwYXJhbSB0eXBlIG9kZCBvciBldmVuXG4gKi9cbmZ1bmN0aW9uIG9kZG9yZXZlbihuOiBzdHJpbmcsIHR5cGU6IHN0cmluZykge1xuICBpZiAoIXR5cGUpIHtcbiAgICB0eXBlID0gXCJvZGRcIjtcbiAgfVxuICBjb25zdCB0aW1lID0gIW4gPyBuZXcgRGF0ZSgpLmdldERheSgpIDogTnVtYmVyKG4pO1xuXG4gIGlmICghL14tP1xcZCtqUXVlcnkvLnRlc3QodGltZS50b1N0cmluZygpKSkge1xuICAgIGFsZXJ0KFwiYXJndW1lbnRzIGlzIG5vdCBudW1iZXIsIHBsZWFzZSByZW1vdmUgcXVvdGVcIik7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBjb25zdCBoYXNpbCA9IHRpbWUgJSAyO1xuXG4gIGNvbnN0IHJUeXBlID0gL14ob2RkfGdhbmppbCkkLy50ZXN0KHR5cGUpID8gXCIxXCIgOiBcIjBcIjtcbiAgLy9yZXR1cm4gaGFzaWwgPT0gKHR5cGUgPT0gKCdvZGQnIHx8ICdnYW5qaWwnKSA/IDEgOiAwKTtcblxuICByZXR1cm4gaGFzaWwudG9TdHJpbmcoKSA9PSByVHlwZS50b1N0cmluZygpO1xufVxuXG4vKipcbiAqIHN0cnBhZCAvIHN0YXJ0d2l0aCB6ZXJvIFswXVxuICogQHBhcmFtIHtudW1iZXJ9IHZhbFxuICovXG5mdW5jdGlvbiBzdHJwYWQodmFsOiBudW1iZXIpIHtcbiAgaWYgKHZhbCA+PSAxMCkge1xuICAgIHJldHVybiB2YWw7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIFwiMFwiICsgdmFsO1xuICB9XG59XG5cbi8qKlxuICogaXMgdmFyaWFibGUgbnVtYmVyP1xuICogQHBhcmFtIG5cbiAqIEByZXR1cm5zXG4gKi9cbmZ1bmN0aW9uIGlzSW50KG4pIHtcbiAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSA9PT0gMDtcbn1cblxuLyoqXG4gKiBpcyB2YXJpYWJsZSBmbG9hdD9cbiAqIEBwYXJhbSBuXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBpc0Zsb2F0KG4pIHtcbiAgcmV0dXJuIE51bWJlcihuKSA9PT0gbiAmJiBuICUgMSAhPT0gMDtcbn1cblxuaWYgKHR5cGVvZiBtb2R1bGUuZXhwb3J0cyAhPSAndW5kZWZpbmVkJykge1xuICBnbG9iYWwuaXNJbnQgPSBpc0ludFxuICBnbG9iYWwuaXNGbG9hdCA9IGlzRmxvYXRcbn0iXX0=
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable no-prototype-builtins */
/* eslint-disable @typescript-eslint/triple-slash-reference */
const __global = (typeof window != 'undefined' ? window : global) /* node */;
Object.size = function (obj) {
    let size = 0, key;
    for (key in obj) {
        if (obj.hasOwnProperty(key))
            size++;
    }
    return size;
};
Object.child = function (str, callback) {
    const self = this;
    if (self.hasOwnProperty(str)) {
        if (typeof callback == 'function') {
            return callback(self[str]);
        }
        else {
            return true;
        }
    }
    else {
        return undefined;
    }
};
Object.alt = function (str, alternative) {
    const self = this;
    if (self.hasOwnProperty(str)) {
        return self[str];
    }
    else {
        return alternative;
    }
};
Object.has = function (str) {
    return this.hasOwnProperty(str);
};
Object.each = function (callback) {
    for (const key in this) {
        //callback.call(scope, key, this[key]);
        callback.call(this[key]);
    }
};
Object.isEmpty = function () {
    return this.length === 0;
};
Object.replaceKeyFrom = function (anotherObj) {
    return Object.entries(this).reduce((op, [key, value]) => {
        const newKey = anotherObj[key];
        op[newKey || key] = value;
        return op;
    }, {});
    /*if (typeof anotherObj == 'object') {
      for (const key in anotherObj) {
        if (Object.prototype.hasOwnProperty.call(anotherObj, key)) {
          const element = anotherObj[key];
          def[key] = element;
        }
      }
    }*/
};
Object.prototype.merge = function (...others) {
    return mergeDeep(this, ...others);
};
/**
 * Join object to separated string
 * * [].join() equivalent
 * @param obj Object
 * @param separator default comma(,)
 * @returns Joined string
 */
function object_join(obj, separator = ',') {
    return Object.keys(obj)
        .map(function (k) {
        return obj[k];
    })
        .join(separator);
}
__global.object_join = object_join;
/**
 * Simple object check.
 * @param item
 * @returns
 * @example
 * ```js
 * console.log(isObject({a:'a'})); // true
 * console.log(isObject(['a','b'])); // false
 * ```
 */
function isObject(item) {
    return item && typeof item === 'object' && !Array.isArray(item);
}
__global.isObject = isObject;
/**
 * Deep merge two objects.
 * @param target
 * @param ...sources
 * @see {@link https://bit.ly/3v1vlXu}
 */
function mergeDeep(target, ...sources) {
    if (!sources.length)
        return target;
    const source = sources.shift();
    if (isObject(target) && isObject(source)) {
        for (const key in source) {
            if (isObject(source[key])) {
                if (!target[key])
                    Object.assign(target, { [key]: {} });
                mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        }
    }
    return mergeDeep(target, ...sources);
}
__global.mergeDeep = mergeDeep;
//# sourceMappingURL=data:application/json;base64,
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/no-var-requires */
/* eslint-disable prefer-rest-params */
/* eslint-disable @typescript-eslint/triple-slash-reference */

String.prototype.printf = function (obj) {
    /*const isNode = new Function(
      "try {return this===global;}catch(e){return false;}"
    );
  
    if (isNode()) {
      const util = require("util");
      return util.format(this, obj);
    }*/
    let useArguments = false;
    const _arguments = arguments;
    let i = -1;
    if (typeof _arguments[0] == 'string') {
        useArguments = true;
    }
    if (obj instanceof Array || useArguments) {
        return this.replace(/%s/g, function (a, b) {
            i++;
            if (useArguments) {
                if (typeof _arguments[i] == 'string') {
                    return _arguments[i];
                }
                else {
                    throw new Error('Arguments element is an invalid type');
                }
            }
            return obj[i];
        });
    }
    else {
        return this.replace(/{([^{}]*)}/g, function (a, b) {
            const r = obj[b];
            return typeof r === 'string' || typeof r === 'number' ? r : a;
        });
    }
};
String.prototype.parse_url = function () {
    let parser;
    if (typeof module != 'undefined' && module.exports) {
        parser = new URL(this);
    }
    else if (typeof document != 'undefined') {
        parser = document.createElement('a');
    }
    const searchObject = [];
    let split = [];
    let queries = [];
    // Let the browser do the work
    parser.href = this.toString();
    // Convert query string to object
    queries = parser.search.replace(/^\?/, '').split('&');
    for (let i = 0; i < queries.length; i++) {
        split = queries[i].split('=');
        if (split.length)
            searchObject[split[0]] = split[1];
    }
    return {
        protocol: parser.protocol,
        host: parser.host,
        hostname: parser.hostname,
        port: parser.port,
        pathname: parser.pathname,
        search: parser.search,
        searchObject: searchObject,
        hash: parser.hash,
        protohost: parser.protocol + '//' + parser.host,
    };
};
/**
 * Load css
 */
String.prototype.CSS = function () {
    const e = document.createElement('link');
    e.rel = 'stylesheet';
    e.href = this.toString();
    const n = document.getElementsByTagName('head')[0];
    window.addEventListener
        ? window.addEventListener('load', function () {
            n.parentNode.insertBefore(e, n);
        }, !1)
        : window.attachEvent
            ? window.attachEvent('onload', function () {
                n.parentNode.insertBefore(e, n);
            })
            : (window.onload = function () {
                n.parentNode.insertBefore(e, n);
            });
};
String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/gm, '');
};
String.prototype.hexE = function () {
    let hex, i;
    let result = '';
    for (i = 0; i < this.length; i++) {
        hex = this.charCodeAt(i).toString(16);
        result += ('000' + hex).slice(-4);
    }
    return result;
};
String.prototype.hexD = function () {
    let j;
    const hexes = this.match(/.{1,4}/g) || [];
    let back = '';
    for (j = 0; j < hexes.length; j++) {
        back += String.fromCharCode(parseInt(hexes[j], 16));
    }
    return back;
};
String.prototype.capitalize = function () {
    return this.charAt(0).toUpperCase() + this.slice(1);
};
String.prototype.rot13 = function () {
    return this.replace(/[a-zA-Z]/g, function (c) {
        return String.fromCharCode((c <= 'Z' ? 90 : 122) >= (c = c.charCodeAt(0) + 13) ? c : c - 26);
    });
};
String.prototype.truncate = function (n, useWordBoundary) {
    if (this.length <= n) {
        return this;
    }
    const subString = this.substr(0, n - 1); // the original check
    return (useWordBoundary ? subString.substr(0, subString.lastIndexOf(' ')) : subString) + '&hellip;';
};
String.prototype.isEmpty = function () {
    if (this != null || typeof this != 'undefined') {
        return this.length === 0 || !this.trim();
    }
    return false;
};
String.prototype.replaceArr = function (array, replacement) {
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    let ori = this;
    array.map((str) => {
        ori = ori.replace(str, replacement);
    });
    return ori;
};
String.prototype.toHtmlEntities = function () {
    return this.replace(/./gm, function (s) {
        // return "&#" + s.charCodeAt(0) + ";";
        return s.match(/[a-z0-9\s]+/i) ? s : '&#' + s.charCodeAt(0) + ';';
    });
};
String.fromHtmlEntities = function (str) {
    return (str + '').replace(/&#\d+;/gm, function (s) {
        const m = s.match(/\d+/gm)[0];
        return String.fromCharCode(m);
    });
};
String.prototype.includesArray = function (substrings) {
    return substrings.some((v) => this.includes(v));
};
const ___global = (typeof window != 'undefined' ? window : global) /* node */;
/**
 * easy regex match
 * @param str
 * @param pattern
 * @returns
 */
function strMatch(str, pattern) {
    let regex;
    if (typeof pattern == 'string') {
        regex = new RegExp(pattern, 'gm');
    }
    else {
        regex = pattern;
    }
    const match = str.match(regex) || false;
    if (Array.isArray(match)) {
        if (match.length > 0)
            return true;
    }
    return false;
}
___global.strMatch = strMatch;
String.prototype.isMatch = function (pattern) {
    return strMatch(this, pattern);
};
if (typeof ''.replaceAll != 'function') {
    String.prototype.replaceAll = function (search, replacement) {
        const find = typeof search == 'string' ? new RegExp(search, 'gm') : search;
        return this.replace(find, replacement);
    };
}
//# sourceMappingURL=data:application/json;base64,
//# sourceMappingURL=data:application/json;charset=utf8;base64,
